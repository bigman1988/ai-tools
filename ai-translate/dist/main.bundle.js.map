{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://excel-to-structured-data/webpack/runtime/chunk loaded","webpack://excel-to-structured-data/./src/components/progress.js","webpack://excel-to-structured-data/./src/components/Logger.js","webpack://excel-to-structured-data/./src/components/TableRenderer.js","webpack://excel-to-structured-data/./src/services/embedding.js","webpack://excel-to-structured-data/./src/services/translator.js","webpack://excel-to-structured-data/./src/services/TranslationManager.js","webpack://excel-to-structured-data/./src/utils/LanguageUtils.js","webpack://excel-to-structured-data/./src/ExcelTranslator.js","webpack://excel-to-structured-data/./src/utils/excel.js","webpack://excel-to-structured-data/./src/index.js","webpack://excel-to-structured-data/webpack/bootstrap","webpack://excel-to-structured-data/webpack/runtime/compat get default export","webpack://excel-to-structured-data/webpack/runtime/define property getters","webpack://excel-to-structured-data/webpack/runtime/global","webpack://excel-to-structured-data/webpack/runtime/hasOwnProperty shorthand","webpack://excel-to-structured-data/webpack/runtime/node module decorator","webpack://excel-to-structured-data/webpack/runtime/runtimeId","webpack://excel-to-structured-data/webpack/runtime/jsonp chunk loading","webpack://excel-to-structured-data/webpack/runtime/nonce","webpack://excel-to-structured-data/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","/**\n * 进度条组件\n */\nexport class ProgressBar {\n    /**\n     * 创建进度条组件\n     */\n    constructor() {\n        this.progressContainer = document.querySelector('.progress-container');\n        this.progressFill = document.querySelector('.progress-fill');\n        this.progressText = document.querySelector('.progress-text');\n        this.progressDetails = document.querySelector('.progress-details');\n        \n        // 创建批次计数器元素\n        this.progressBatchCounter = document.createElement('div');\n        this.progressBatchCounter.className = 'progress-batch-counter';\n        this.progressBatchCounter.style.textAlign = 'center';\n        this.progressBatchCounter.style.marginTop = '5px';\n        this.progressBatchCounter.style.fontSize = '14px';\n        this.progressBatchCounter.style.color = '#666';\n        \n        // 将批次计数器添加到进度条容器后面\n        this.progressContainer.parentNode?.insertBefore(\n            this.progressBatchCounter, \n            this.progressContainer.nextSibling\n        );\n    }\n\n    /**\n     * 更新进度\n     * @param {Object} data - 进度数据\n     * @param {number} data.current - 当前进度\n     * @param {number} data.total - 总进度\n     * @param {string} [data.text] - 进度文本\n     */\n    updateProgress(data) {\n        const percentage = (data.current / data.total) * 100;\n        this.progressFill.style.width = `${percentage}%`;\n        this.progressText.textContent = `${Math.round(percentage)}%`;\n        \n        if (data.text) {\n            this.progressDetails.textContent = data.text;\n        }\n    }\n    \n    /**\n     * 更新批次进度\n     * @param {Object} progress - 批次进度数据\n     * @param {number} progress.completedBatches - 已完成批次数\n     * @param {number} progress.totalBatches - 总批次数\n     * @param {number} progress.currentBatchId - 当前批次ID\n     * @param {number} progress.completedTasksInCurrentBatch - 当前批次已完成任务数\n     * @param {number} progress.totalTasksInCurrentBatch - 当前批次总任务数\n     */\n    updateBatchProgress(progress) {\n        // 更新总体进度\n        const overallPercentage = (progress.completedBatches / progress.totalBatches) * 100;\n        this.progressFill.style.width = `${overallPercentage}%`;\n        this.progressText.textContent = `${Math.round(overallPercentage)}%`;\n        \n        // 更新批次计数器\n        this.progressBatchCounter.textContent = `批次进度: ${progress.completedBatches}/${progress.totalBatches}`;\n        \n        // 更新详细信息\n        if (progress.currentBatchId > 0) {\n            const batchProgress = (progress.completedTasksInCurrentBatch / progress.totalTasksInCurrentBatch) * 100;\n            this.progressDetails.textContent = `当前批次 ${progress.currentBatchId}/${progress.totalBatches}: 完成 ${Math.round(batchProgress)}%`;\n        }\n    }\n\n    /**\n     * 重置进度条\n     */\n    reset() {\n        this.progressFill.style.width = '0%';\n        this.progressText.textContent = '0%';\n        this.progressDetails.textContent = '';\n    }\n\n    /**\n     * 显示进度条\n     */\n    show() {\n        this.progressContainer.style.display = 'block';\n    }\n\n    /**\n     * 隐藏进度条\n     */\n    hide() {\n        this.progressContainer.style.display = 'none';\n    }\n}\n","/**\n * 日志记录器组件\n */\nexport class Logger {\n    /**\n     * 创建日志记录器\n     * @param {HTMLElement} container - 日志容器元素\n     */\n    constructor(container) {\n        this.container = container;\n    }\n\n    /**\n     * 记录日志消息\n     * @param {string} message - 日志消息\n     * @param {string} type - 日志类型 (info, warning, error, success)\n     */\n    log(message, type = 'info') {\n        if (!this.container) return;\n\n        const logEntry = document.createElement('div');\n        logEntry.className = `log-entry ${type}`;\n        logEntry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;\n        this.container.appendChild(logEntry);\n        this.container.scrollTop = this.container.scrollHeight;\n    }\n}\n","/**\n * 表格渲染器组件\n */\nexport class TableRenderer {\n    /**\n     * 创建表格渲染器\n     * @param {HTMLElement} container - 表格容器元素\n     */\n    constructor(container) {\n        this.container = container;\n    }\n\n    /**\n     * 获取Excel列名\n     * @param {number} index - 列索引\n     * @returns {string} - 列名（如A, B, AA等）\n     */\n    getExcelColumnName(index) {\n        let columnName = '';\n        while (index >= 0) {\n            columnName = String.fromCharCode(65 + (index % 26)) + columnName;\n            index = Math.floor(index / 26) - 1;\n        }\n        return columnName;\n    }\n\n    /**\n     * 直接更新DOM中的单元格内容，而不重新渲染整个表格\n     * @param {number} rowIndex 行索引\n     * @param {number} colIndex 列索引\n     * @param {string} text 新的单元格内容\n     * @param {number} headerRowsCount 头部行数量\n     */\n    updateCellInDOM(rowIndex, colIndex, text, headerRowsCount) {\n        if (!this.container) return;\n        \n        const tableWrapper = this.container.querySelector('.table-wrapper');\n        if (!tableWrapper) return;\n        \n        const table = tableWrapper.querySelector('table');\n        if (!table) return;\n        \n        // 如果是头部行，不进行更新\n        if (rowIndex < headerRowsCount) return;\n        \n        // 遍历所有行，找到对应的行\n        const rows = table.querySelectorAll('tr');\n        let targetRow = undefined;\n        \n        for (let i = 0; i < rows.length; i++) {\n            const row = rows[i];\n            const rowNumberCell = row.querySelector('.row-number');\n            if (rowNumberCell && rowNumberCell.textContent === (rowIndex + 1).toString()) {\n                targetRow = row;\n                break;\n            }\n        }\n        \n        if (!targetRow) return;\n        \n        // 找到对应的单元格，注意第一列是行号，所以需要+1\n        if (colIndex + 1 < targetRow.children.length) {\n            const cell = targetRow.children[colIndex + 1];\n            if (cell) {\n                cell.textContent = text;\n            }\n        }\n    }\n\n    /**\n     * 渲染表格\n     * @param {Object} sheetData - 工作表数据\n     * @param {Array} sheetData.headerRows - 头部行\n     * @param {Array} sheetData.rows - 数据行\n     * @param {Function} onCellEdit - 单元格编辑回调\n     */\n    renderTable(sheetData, onCellEdit) {\n        if (!this.container) return;\n\n        // 清空现有内容\n        this.container.innerHTML = '';\n        \n        // 创建表格容器，使用固定头的布局\n        const tableWrapper = document.createElement('div');\n        tableWrapper.className = 'table-wrapper';\n\n        const table = document.createElement('table');\n        table.className = 'excel-table';\n\n        const { headerRows, rows } = sheetData;\n        const allRows = [...headerRows, ...rows];\n\n        // 计算最大列数\n        const maxColumns = Math.max(\n            ...headerRows.map(row => row.length),\n            ...rows.map(row => row.length)\n        );\n\n        // 创建列号行\n        const colNumberRow = document.createElement('tr');\n        const emptyTh = document.createElement('th'); // 左上角空单元格\n        colNumberRow.appendChild(emptyTh);\n        \n        for (let i = 0; i < maxColumns; i++) {\n            const th = document.createElement('th');\n            th.textContent = this.getExcelColumnName(i);\n            th.className = 'column-header';\n            colNumberRow.appendChild(th);\n        }\n        table.appendChild(colNumberRow);\n\n        // 创建表格内容\n        allRows.forEach((row, rowIndex) => {\n            const tr = document.createElement('tr');\n            \n            // 如果不是第二行（索引为1），并且是在前6行内，则隐藏\n            if (rowIndex !== 1 && rowIndex < 6) {\n                tr.style.display = 'none';\n                return;\n            }\n\n            // 添加行号\n            const rowNumberCell = document.createElement('td');\n            rowNumberCell.textContent = (rowIndex + 1).toString();\n            rowNumberCell.className = 'row-number';\n            tr.appendChild(rowNumberCell);\n\n            // 添加数据单元格\n            for (let colIndex = 0; colIndex < maxColumns; colIndex++) {\n                const td = document.createElement(rowIndex < headerRows.length ? 'th' : 'td');\n                td.textContent = row[colIndex] || '';\n                \n                // 设置单元格可编辑\n                if (rowIndex >= headerRows.length) {\n                    td.contentEditable = 'true';\n                }\n                \n                // 添加单元格编辑事件\n                td.addEventListener('input', () => {\n                    onCellEdit(rowIndex, colIndex, td.textContent || '');\n                });\n\n                tr.appendChild(td);\n            }\n\n            table.appendChild(tr);\n        });\n\n        tableWrapper.appendChild(table);\n        this.container.appendChild(tableWrapper);\n        \n        // 添加CSS样式使行号和列头固定\n        this.addTableStyles();\n    }\n\n    /**\n     * 添加表格样式\n     */\n    addTableStyles() {\n        const styleId = 'fixed-table-style';\n        if (!document.getElementById(styleId)) {\n            const style = document.createElement('style');\n            style.id = styleId;\n            style.textContent = `\n                .table-wrapper {\n                    position: relative;\n                    overflow: auto;\n                    height: 99vh;\n                    max-width: 100%;\n                    border: 1px solid #ccc;\n                    margin: 1px;\n                    scroll-padding-top: 40px; /* 添加滚动填充，防止内容被固定头部遮挡 */\n                }\n                \n                .excel-table {\n                    border-collapse: collapse;\n                }\n                \n                .excel-table th, .excel-table td {\n                    border: 1px solid #ddd;\n                    padding: 8px;\n                    min-width: 100px;\n                }\n                \n                .excel-table th:first-child {\n                    position: sticky;\n                    left: 0;\n                    z-index: 3;\n                    background-color: #f2f2f2;\n                }\n                \n                .excel-table thead th {\n                    position: sticky;\n                    top: 0;\n                    z-index: 2;\n                    background-color: #f2f2f2;\n                    box-shadow: 0 1px 0 rgba(0,0,0,0.1); /* 添加底部阴影，增强视觉效果 */\n                }\n                \n                .excel-table tr:first-child th {\n                    position: sticky;\n                    top: 0;\n                    z-index: 2;\n                    background-color: #f2f2f2;\n                    box-shadow: 0 1px 0 rgba(0,0,0,0.1); /* 添加底部阴影，增强视觉效果 */\n                }\n                \n                /* 处理左上角单元格，同时固定在顶部和左侧 */\n                .excel-table tr:first-child th:first-child {\n                    position: sticky;\n                    top: 0;\n                    left: 0;\n                    z-index: 4; /* 最高层级，确保始终显示在最上层 */\n                    background-color: #f2f2f2;\n                    box-shadow: 1px 1px 0 rgba(0,0,0,0.1); /* 添加右侧和底部阴影 */\n                }\n                \n                .excel-table .row-number {\n                    position: sticky;\n                    left: 0;\n                    z-index: 1;\n                    background-color: #f2f2f2;\n                }\n            `;\n            document.head.appendChild(style);\n        }\n    }\n}\n","import fetch from 'node-fetch';\nimport { QdrantClient } from '@qdrant/qdrant-js';\nimport crypto from 'crypto'; // 导入crypto模块\n// 不再使用 dotenv/config，在服务器启动时已加载环境变量\n\nexport class OllamaEmbeddingService {\n    constructor(\n        ollamaUrl = process.env.OLLAMA_URL || 'http://localhost:11434',\n        modelName = 'nomic-embed-text',\n        qdrantUrl = process.env.QDRANT_URL || 'http://localhost:6333',\n        collectionName = 'translation_embeddings',\n        vectorSize = 768\n    ) {\n        this.ollamaUrl = ollamaUrl;\n        this.modelName = modelName;\n        this.collectionName = collectionName;\n        this.vectorSize = vectorSize;\n        \n        // 初始化Qdrant客户端，启用版本兼容性检查\n        this.qdrantClient = new QdrantClient({ \n            url: qdrantUrl,\n            checkCompatibility: true,  // 启用版本兼容性检查\n            timeout: 10000  // 增加超时时间到10秒\n        });\n        \n        console.log(`实际使用的Qdrant URL: ${qdrantUrl}`);\n        console.log(`实际使用的Ollama URL: ${ollamaUrl}`);\n    }\n\n    /**\n     * 初始化向量数据库集合\n     */\n    async initializeCollection() {\n        try {\n            // 检查集合是否存在\n            const collections = await this.qdrantClient.getCollections();\n            const collectionExists = collections.collections.some(c => c.name === this.collectionName);\n\n            if (!collectionExists) {\n                // 创建新集合\n                await this.qdrantClient.createCollection(this.collectionName, {\n                    vectors: {\n                        size: this.vectorSize,\n                        distance: 'Cosine'\n                    }\n                });\n                console.log(`创建集合: ${this.collectionName}`);\n            } else {\n                console.log(`集合已存在: ${this.collectionName}`);\n            }\n            return true;\n        } catch (error) {\n            console.error('初始化向量数据库集合失败:', error);\n            // 不抛出错误，而是返回失败状态\n            return false;\n        }\n    }\n\n    /**\n     * 使用Ollama生成文本嵌入向量\n     */\n    async generateEmbedding(text) {\n        try {\n            if (!text || text.trim() === '') {\n                console.log('文本为空，无法生成向量');\n                return null;\n            }\n            \n            console.log(`正在为文本生成向量: \"${text.substring(0, 30)}${text.length > 30 ? '...' : ''}\"`);\n            \n            const response = await fetch(`${this.ollamaUrl}/api/embeddings`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    model: this.modelName,\n                    prompt: text\n                }),\n                timeout: 30000 // 增加超时时间到30秒\n            });\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`Ollama API错误: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n\n            const data = await response.json();\n            \n            // 检查返回的数据结构\n            if (!data || !data.embedding) {\n                console.error('Ollama API返回的数据结构不正确:', JSON.stringify(data).substring(0, 200));\n                return null;\n            }\n            \n            console.log(`成功生成向量，维度: ${data.embedding.length}`);\n            return data;\n        } catch (error) {\n            console.error('生成嵌入向量失败:', error);\n            // 不抛出错误，而是返回null\n            return null;\n        }\n    }\n\n    /**\n     * 存储嵌入向量到Qdrant\n     */\n    async storeEmbedding(text, metadata) {\n        try {\n            const embedding = await this.generateEmbedding(text);\n            \n            if (embedding === null) {\n                console.error('生成嵌入向量失败，无法存储');\n                return { success: false, id: null };\n            }\n            \n            // 使用UUID作为ID\n            const uuid = crypto.randomUUID();\n            \n            await this.qdrantClient.upsert(this.collectionName, {\n                wait: true,\n                points: [\n                    {\n                        id: uuid,\n                        vector: embedding.embedding,\n                        payload: {\n                            text,\n                            ...metadata\n                        }\n                    }\n                ]\n            });\n            \n            console.log(`成功存储嵌入向量: ${uuid}, 类型: ${metadata.type || '未指定'}`);\n            return { success: true, id: uuid };\n        } catch (error) {\n            console.error('存储嵌入向量失败:', error);\n            // 不抛出错误，而是返回失败状态\n            return { success: false, id: null };\n        }\n    }\n\n    /**\n     * 存储完整翻译条目的向量（包含中文和英文向量）\n     * @param {Object} entry - 完整的翻译条目，包含所有语言\n     * @returns {Object} - 包含操作结果和向量ID的对象\n     */\n    async storeEntryVectors(entry) {\n        try {\n            // 检查集合是否存在，如果不存在则初始化\n            try {\n                const collections = await this.qdrantClient.getCollections();\n                const collectionExists = collections.collections.some(c => c.name === this.collectionName);\n                \n                if (!collectionExists) {\n                    console.log(`集合不存在，正在创建: ${this.collectionName}`);\n                    await this.initializeCollection();\n                }\n            } catch (collectionError) {\n                console.error('检查集合时出错:', collectionError);\n                await this.initializeCollection();\n            }\n            \n            // 生成UUID作为向量ID\n            const uuid = crypto.randomUUID();\n            \n            // 准备元数据\n            const payload = {\n                chinese: entry.Chinese || '',\n                english: entry.English || '',\n                japanese: entry.Japanese || '',\n                korean: entry.Korean || '',\n                spanish: entry.Spanish || '',\n                french: entry.French || '',\n                german: entry.German || '',\n                russian: entry.Russian || '',\n                thai: entry.Thai || '',\n                italian: entry.Italian || '',\n                indonesian: entry.Indonesian || '',\n                portuguese: entry.Portuguese || ''\n            };\n            \n            // 生成中文和英文的向量嵌入\n            let vector_cn = null;\n            let vector_en = null;\n            \n            if (entry.Chinese && entry.Chinese.trim() !== '') {\n                try {\n                    const cnEmbedding = await this.generateEmbedding(entry.Chinese);\n                    if (cnEmbedding && cnEmbedding.embedding) {\n                        vector_cn = cnEmbedding.embedding;\n                    }\n                } catch (cnError) {\n                    console.error('生成中文向量失败:', cnError);\n                }\n            }\n            \n            if (entry.English && entry.English.trim() !== '') {\n                try {\n                    const enEmbedding = await this.generateEmbedding(entry.English);\n                    if (enEmbedding && enEmbedding.embedding) {\n                        vector_en = enEmbedding.embedding;\n                    }\n                } catch (enError) {\n                    console.error('生成英文向量失败:', enError);\n                }\n            }\n            \n            // 如果没有成功生成任何向量，则返回失败\n            if (!vector_cn && !vector_en) {\n                console.error('无法为条目生成向量嵌入:', entry.Chinese);\n                return { success: false, id: null, error: '无法生成向量嵌入' };\n            }\n            \n            const point = {\n                id: uuid,\n                // 如果中文向量存在则使用中文向量，否则使用英文向量\n                vector: vector_cn || vector_en,\n                payload: payload\n            };\n\n            // 如果同时存在中文和英文向量，则添加到payload中\n            if (vector_cn && vector_en) {\n                point.payload.vector_cn = vector_cn;\n                point.payload.vector_en = vector_en;\n            }\n\n            // 存储到Qdrant\n            try {\n                await this.qdrantClient.upsert(this.collectionName, {\n                    wait: true,\n                    points: [point]\n                });\n                \n                console.log(`成功存储翻译条目向量: ${uuid}`);\n                return { success: true, id: uuid };\n            } catch (upsertError) {\n                console.error('向Qdrant存储向量失败:', upsertError);\n                \n                // 尝试再次初始化集合并重试\n                try {\n                    console.log('尝试重新初始化集合并重试...');\n                    await this.initializeCollection();\n                    \n                    await this.qdrantClient.upsert(this.collectionName, {\n                        wait: true,\n                        points: [point]\n                    });\n                    \n                    console.log(`重试成功，已存储翻译条目向量: ${uuid}`);\n                    return { success: true, id: uuid };\n                } catch (retryError) {\n                    console.error('重试存储向量失败:', retryError);\n                    return { success: false, id: null, error: retryError.message };\n                }\n            }\n        } catch (error) {\n            console.error('存储翻译条目向量失败:', error);\n            return { success: false, id: null, error: error.message };\n        }\n    }\n\n    /**\n     * 更新翻译条目的向量\n     * @param {string} id - 要更新的向量ID\n     * @param {Object} entry - 完整的翻译条目，包含所有语言\n     * @returns {Object} - 包含操作结果和向量ID的对象\n     */\n    async updateEntryVectors(id, entry) {\n        try {\n            if (!id) {\n                // 如果没有ID，则创建新的向量\n                return await this.storeEntryVectors(entry);\n            }\n\n            if (!entry.Chinese && !entry.English) {\n                console.error('中文和英文内容均为空，无法更新向量');\n                return { success: false, id: null };\n            }\n\n            // 生成中文向量（如果有中文内容）\n            let vector_cn = null;\n            if (entry.Chinese) {\n                vector_cn = await this.generateEmbedding(entry.Chinese);\n                if (vector_cn === null) {\n                    console.error('生成中文嵌入向量失败');\n                }\n            }\n\n            // 生成英文向量（如果有英文内容）\n            let vector_en = null;\n            if (entry.English) {\n                vector_en = await this.generateEmbedding(entry.English);\n                if (vector_en === null) {\n                    console.error('生成英文嵌入向量失败');\n                }\n            }\n\n            // 如果两个向量都生成失败，则返回失败\n            if (vector_cn === null && vector_en === null) {\n                return { success: false, id: null };\n            }\n\n            // 准备完整的payload数据\n            const payload = {\n                Chinese: entry.Chinese || '',\n                English: entry.English || '',\n                Japanese: entry.Japanese || '',\n                Korean: entry.Korean || '',\n                Spanish: entry.Spanish || '',\n                French: entry.French || '',\n                German: entry.German || '',\n                Russian: entry.Russian || '',\n                Thai: entry.Thai || '',\n                Italian: entry.Italian || '',\n                Indonesian: entry.Indonesian || '',\n                Portuguese: entry.Portuguese || ''\n            };\n\n            // 构建要更新的点\n            const point = {\n                id: id,\n                // 如果中文向量存在则使用中文向量，否则使用英文向量\n                vector: vector_cn || vector_en,\n                payload: payload\n            };\n\n            // 如果同时存在中文和英文向量，则添加到payload中\n            if (vector_cn && vector_en) {\n                point.payload.vector_cn = vector_cn;\n                point.payload.vector_en = vector_en;\n            }\n\n            // 更新Qdrant中的向量\n            await this.qdrantClient.upsert(this.collectionName, {\n                wait: true,\n                points: [point]\n            });\n            \n            console.log(`成功更新翻译条目向量: ${id}`);\n            return { success: true, id: id };\n        } catch (error) {\n            console.error('更新翻译条目向量失败:', error);\n            return { success: false, id: null };\n        }\n    }\n\n    /**\n     * 搜索相似文本\n     * @param {string} text - 要搜索的文本\n     * @param {string} language - 搜索语言，可以是 'chinese' 或 'english'\n     * @param {number} limit - 返回结果数量限制\n     */\n    async searchSimilar(text, language = 'chinese', limit = 5) {\n        try {\n            const embedding = await this.generateEmbedding(text);\n            \n            if (embedding === null) {\n                console.error('生成嵌入向量失败，无法搜索');\n                return [];\n            }\n            \n            console.log(`开始搜索相似文本，语言: ${language}, 限制: ${limit}`);\n            \n            // 根据语言选择不同的搜索策略\n            let searchResults;\n            \n            if (language === 'english') {\n                // 如果是英文搜索，优先使用vector_en字段\n                searchResults = await this.qdrantClient.search(this.collectionName, {\n                    vector: embedding.embedding,\n                    limit,\n                    with_payload: true,\n                    with_vectors: true  // 获取向量数据\n                });\n                \n                // 对结果进行后处理，使用vector_en进行重新排序（如果存在）\n                searchResults = searchResults.map(result => {\n                    // 如果存在英文向量，计算与查询向量的相似度\n                    if (result.payload && result.payload.vector_en) {\n                        const similarity = this.calculateCosineSimilarity(embedding.embedding, result.payload.vector_en);\n                        return { ...result, score: similarity };\n                    }\n                    return result;\n                });\n            } else {\n                // 如果是中文搜索，优先使用vector_cn字段\n                searchResults = await this.qdrantClient.search(this.collectionName, {\n                    vector: embedding.embedding,\n                    limit,\n                    with_payload: true,\n                    with_vectors: true  // 获取向量数据\n                });\n                \n                // 对结果进行后处理，使用vector_cn进行重新排序（如果存在）\n                searchResults = searchResults.map(result => {\n                    // 如果存在中文向量，计算与查询向量的相似度\n                    if (result.payload && result.payload.vector_cn) {\n                        const similarity = this.calculateCosineSimilarity(embedding.embedding, result.payload.vector_cn);\n                        return { ...result, score: similarity };\n                    }\n                    return result;\n                });\n            }\n            \n            // 按相似度排序\n            searchResults.sort((a, b) => b.score - a.score);\n            \n            console.log(`搜索完成，找到 ${searchResults.length} 条结果`);\n            return searchResults.map(result => ({\n                id: result.id,\n                score: result.score,\n                metadata: {\n                    Chinese: result.payload.Chinese,\n                    English: result.payload.English,\n                    Japanese: result.payload.Japanese,\n                    Korean: result.payload.Korean,\n                    Spanish: result.payload.Spanish,\n                    French: result.payload.French,\n                    German: result.payload.German,\n                    Russian: result.payload.Russian,\n                    Thai: result.payload.Thai,\n                    Italian: result.payload.Italian,\n                    Indonesian: result.payload.Indonesian,\n                    Portuguese: result.payload.Portuguese\n                }\n            }));\n        } catch (error) {\n            console.error('搜索相似文本失败:', error);\n            // 不抛出错误，而是返回空数组\n            return [];\n        }\n    }\n    \n    /**\n     * 计算两个向量之间的余弦相似度\n     * @param {Array} vec1 - 第一个向量\n     * @param {Array} vec2 - 第二个向量\n     * @returns {number} - 余弦相似度，范围在-1到1之间\n     */\n    calculateCosineSimilarity(vec1, vec2) {\n        if (!vec1 || !vec2 || vec1.length !== vec2.length) {\n            return 0;\n        }\n        \n        let dotProduct = 0;\n        let norm1 = 0;\n        let norm2 = 0;\n        \n        for (let i = 0; i < vec1.length; i++) {\n            dotProduct += vec1[i] * vec2[i];\n            norm1 += vec1[i] * vec1[i];\n            norm2 += vec2[i] * vec2[i];\n        }\n        \n        norm1 = Math.sqrt(norm1);\n        norm2 = Math.sqrt(norm2);\n        \n        if (norm1 === 0 || norm2 === 0) {\n            return 0;\n        }\n        \n        return dotProduct / (norm1 * norm2);\n    }\n\n    /**\n     * 删除嵌入向量\n     */\n    async deleteEmbedding(id) {\n        try {\n            await this.qdrantClient.delete(this.collectionName, {\n                wait: true,\n                points: [id]\n            });\n            \n            return true;\n        } catch (error) {\n            console.error('删除嵌入向量失败:', error);\n            // 不抛出错误，而是返回失败状态\n            return false;\n        }\n    }\n}\n\n// 导出默认实例\nexport const embeddingService = new OllamaEmbeddingService();\n","/**\n * 翻译服务类\n */\nimport { embeddingService } from './embedding.js';\nimport fetch from 'node-fetch';\n\nexport class TranslationService {\n    /**\n     * 创建翻译服务实例\n     * @param {string} apiKey - API密钥\n     * @param {Function} logCallback - 日志回调函数\n     */\n    constructor(apiKey, logCallback) {\n        this.apiEndpoint = 'https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions';\n        // 优先使用传入的API密钥，如果没有则使用环境变量中的密钥\n        this.apiKey = apiKey || process.env.ALI_API_KEY || '';\n        this.logCallback = logCallback || console.log;\n        this.shouldStopTranslation = false;\n        \n        if (this.apiKey) {\n            console.log('已成功加载API密钥');\n        }\n    }\n\n    /**\n     * 停止翻译\n     */\n    stopTranslation() {\n        this.shouldStopTranslation = true;\n    }\n\n    /**\n     * 重置停止标志\n     */\n    resetStopFlag() {\n        this.shouldStopTranslation = false;\n    }\n\n    /**\n     * 从知识库中获取翻译记忆\n     * @param {string} text - 源文本\n     * @param {string} sourceLanguage - 源语言\n     * @param {string} targetLanguage - 目标语言\n     * @returns {Promise<Array>} - 翻译记忆列表\n     */\n    async getTranslationMemory(text, sourceLanguage, targetLanguage) {\n        try {\n            if (!text || text.trim() === '') {\n                return [];\n            }\n\n            // 确定向量搜索的语言类型\n            const vectorLanguage = sourceLanguage === 'Chinese' ? 'chinese' : 'english';\n            \n            // 搜索相似的翻译条目\n            const similarEntries = await embeddingService.searchSimilar(text, vectorLanguage, 5);\n            \n            // 如果没有找到相似条目，返回空数组\n            if (!similarEntries || similarEntries.length === 0) {\n                console.log('未找到相似的翻译记忆');\n                return [];\n            }\n            \n            // 确定源语言和目标语言在数据库中的字段名\n            const sourceField = sourceLanguage === 'Chinese' ? 'Chinese' : 'English';\n            let targetField;\n            \n            // 根据目标语言确定字段名\n            switch (targetLanguage) {\n                case 'Japanese': targetField = 'Japanese'; break;\n                case 'Korean': targetField = 'Korean'; break;\n                case 'Spanish': targetField = 'Spanish'; break;\n                case 'French': targetField = 'French'; break;\n                case 'German': targetField = 'German'; break;\n                case 'Russian': targetField = 'Russian'; break;\n                case 'Thai': targetField = 'Thai'; break;\n                case 'Italian': targetField = 'Italian'; break;\n                case 'Indonesian': targetField = 'Indonesian'; break;\n                case 'Portuguese': targetField = 'Portuguese'; break;\n                case 'English': targetField = 'English'; break;\n                case 'Chinese': targetField = 'Chinese'; break;\n                default: targetField = targetLanguage;\n            }\n            \n            // 构建翻译记忆列表\n            const tmList = [];\n            \n            for (const entry of similarEntries) {\n                const source = entry.payload[sourceField];\n                const target = entry.payload[targetField];\n                \n                // 只有当源和目标都有值时才添加到翻译记忆\n                if (source && target && source.trim() !== '' && target.trim() !== '') {\n                    tmList.push({\n                        source: source,\n                        target: target\n                    });\n                }\n            }\n            \n            console.log(`找到 ${tmList.length} 条翻译记忆`);\n            return tmList;\n        } catch (error) {\n            console.error('获取翻译记忆失败:', error);\n            return [];\n        }\n    }\n\n    /**\n     * 翻译批次\n     * @param {Object} batch - 翻译批次\n     * @param {string} sourceLanguage - 源语言\n     * @returns {Promise<boolean>} - 是否成功\n     */\n    async translateBatch(batch, sourceLanguage) {\n        try {\n            // 获取批次的行号范围\n            const rowIndices = batch.tasks.map(task => task.rowIndex + 3); // +3 因为用户看到的Excel行号从1开始，加上有两行头部\n            const minRow = Math.min(...rowIndices);\n            const maxRow = Math.max(...rowIndices);\n            const rowRange = minRow === maxRow ? `第 ${minRow} 行` : `第 ${minRow} 行到第 ${maxRow} 行`;\n            \n            // 获取源语言和目标语言\n            const targetLang = batch.tasks.length > 0 ? batch.tasks[0].targetLang : '未知';\n            \n            this.logCallback(`开始翻译批次 ${batch.batchId} - ${sourceLanguage} 到 ${targetLang} - ${rowRange} - ${batch.tasks.length}个任务`, 'info');\n            \n            // 只在调试模式下打印详细任务信息\n            if (process.env.NODE_ENV === 'development') {\n                console.log(`开始翻译批次 - ${batch.tasks.length}个任务:`, batch.tasks);\n            }\n            \n            // 再次尝试从环境变量获取API密钥\n            if (!this.apiKey || (typeof this.apiKey === 'string' && this.apiKey.trim() === '')) {\n                if (process.env.ALI_API_KEY) {\n                    this.apiKey = process.env.ALI_API_KEY;\n                    console.log('从环境变量获取到API密钥');\n                } else {\n                    const error = new Error('错误：API密钥未设置');\n                    console.error(error);\n                    this.logCallback(error.message, 'error');\n                    throw error;\n                }\n            }\n            \n            // 过滤掉空文本任务或非字符串任务\n            const validTasks = batch.tasks.filter(task => {\n                try {\n                    // 如果任务文本不是字符串，尝试转换\n                    if (typeof task.text !== 'string') {\n                        console.error(`警告: 任务文本不是字符串，类型为 ${typeof task.text}`);\n                        if (task.text === null || task.text === undefined) {\n                            return false; // 跳过 null 或 undefined\n                        }\n                        // 尝试转换为字符串\n                        task.text = String(task.text);\n                    }\n                    return task.text.trim() !== '';\n                } catch (error) {\n                    console.error(`过滤任务时出错:`, error, task);\n                    return false; // 如果出错，跳过该任务\n                }\n            });\n            if (validTasks.length === 0) {\n                this.logCallback('批次中没有有效的翻译任务', 'warning');\n                return false;\n            }\n            \n            if (this.shouldStopTranslation) {\n                console.log('翻译被用户停止');\n                this.logCallback('翻译被用户停止', 'warning');\n                return false;\n            }\n\n            try {\n                // 检查是否有有效任务\n                if (validTasks.length === 0) {\n                    this.logCallback('没有有效的翻译任务', 'warning');\n                    return false;\n                }\n                \n                // 检查目标语言是否存在\n                if (!validTasks[0].targetLang) {\n                    console.error('错误: 目标语言未定义', validTasks[0]);\n                    this.logCallback('错误: 目标语言未定义', 'error');\n                    return false;\n                }\n                \n                console.log(`翻译批次 - 目标语言: ${validTasks[0].targetLang}, 共${validTasks.length}个任务`);\n                \n                // 获取目标语言\n                const targetLang = validTasks[0].targetLang;\n                \n                // 如果批次中只有一个任务，使用单个翻译方法\n                if (validTasks.length === 1) {\n                    const task = validTasks[0];\n                    const success = await this.translateSingle(task, sourceLanguage);\n                    batch.success = success;\n                    return success;\n                }\n                \n                // 收集所有任务的文本和目标语言\n                const response = await fetch(this.apiEndpoint, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${typeof this.apiKey === 'string' ? this.apiKey.trim() : this.apiKey}`,\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        model: \"qwen-mt-turbo\",\n                        messages: [\n                            {\n                                role: \"user\",\n                                content: validTasks.map(t => t.text).join('\\n')\n                            }\n                        ],\n                        translation_options: {\n                            source_lang: sourceLanguage,\n                            target_lang: validTasks[0].targetLang // 批次中所有任务都是相同的目标语言\n                        },\n                        temperature: 0.7,\n                        max_tokens: 2000 // 增加最大token数限制，因为我们现在一次翻译多条\n                    })\n                });\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    console.error(`翻译API错误 - 状态码: ${response.status}, 错误信息:`, errorText);\n                    this.logCallback(`翻译API错误: ${response.status} - ${errorText}`, 'error');\n                    throw new Error(`翻译API错误: ${response.status}`);\n                }\n\n                const responseText = await response.text();\n                \n                // 只在开发模式下打印API响应\n                if (process.env.NODE_ENV === 'development') {\n                    console.log('API原始响应:', responseText);\n                }\n                \n                const data = JSON.parse(responseText);\n                \n                // 只在开发模式下打印解析后的数据\n                if (process.env.NODE_ENV === 'development') {\n                    console.log('解析后的响应数据:', data);\n                }\n                \n                if (!data.choices?.[0]?.message?.content) {\n                    console.error('翻译返回数据格式错误:', data);\n                    this.logCallback('翻译返回数据格式错误', 'error');\n                    throw new Error('翻译返回数据格式错误');\n                }\n\n                // 获取翻译结果并分配给每个任务\n                const translatedContent = data.choices[0].message.content;\n                const translatedLines = typeof translatedContent === 'string' ? \n                    translatedContent.trim().split('\\n') : \n                    [String(translatedContent)];\n                console.log(`收到 ${translatedLines.length} 行翻译结果，共 ${validTasks.length} 个任务`);\n                \n                // 确保翻译结果行数与任务数量匹配\n                const minLength = Math.min(translatedLines.length, validTasks.length);\n                \n                for (let i = 0; i < minLength; i++) {\n                    const translatedLine = translatedLines[i];\n                    validTasks[i].text = typeof translatedLine === 'string' ? \n                        translatedLine.trim() : String(translatedLine);\n                    console.log(`翻译成功 - 行号: ${validTasks[i].rowIndex + 1}, 译文: ${validTasks[i].text}`);\n                }\n                \n                // 如果翻译结果行数少于任务数量，记录错误\n                if (translatedLines.length < validTasks.length) {\n                    const missingCount = validTasks.length - translatedLines.length;\n                    this.logCallback(`警告: ${missingCount} 个任务没有收到翻译结果`, 'warning');\n                }\n                \n                // 标记翻译成功\n                batch.success = true;\n                return true;\n                \n            } catch (error) {\n                console.error(`批量翻译失败 - 批次 ${batch.batchId}`, error);\n                \n                // 打印批次信息以帮助调试\n                console.error('批次任务详情:', batch.tasks.map(task => ({\n                    rowIndex: task.rowIndex,\n                    text: task.text,\n                    textType: typeof task.text\n                })));\n                \n                this.logCallback(`翻译失败: ${error.message}`, 'error');\n                \n                // 标记翻译失败\n                batch.success = false;\n                return false;\n            }\n        } catch (error) {\n            console.error('翻译批次失败:', error);\n            this.logCallback(`翻译失败: ${error.message}`, 'error');\n            return false;\n        }\n    }\n\n    /**\n     * 翻译单个任务\n     * @param {Object} task - 翻译任务\n     * @param {string} sourceLanguage - 源语言\n     * @returns {Promise<boolean>} - 是否成功\n     */\n    async translateSingle(task, sourceLanguage) {\n        try {\n            console.log(`开始单个翻译 - 源语言: ${sourceLanguage}, 目标语言: ${task.targetLang}, 文本: ${task.text}`);\n            \n            // 获取翻译记忆\n            const tmList = await this.getTranslationMemory(task.text, sourceLanguage, task.targetLang);\n            \n            // 构建API请求体\n            const requestBody = {\n                model: \"qwen-mt-turbo\",\n                messages: [\n                    {\n                        role: \"user\",\n                        content: task.text\n                    }\n                ],\n                translation_options: {\n                    source_lang: sourceLanguage,\n                    target_lang: task.targetLang\n                },\n                temperature: 0.7,\n                max_tokens: 1000\n            };\n            \n            // 如果有翻译记忆，添加到请求中\n            if (tmList && tmList.length > 0) {\n                requestBody.translation_options.tm_list = tmList;\n                console.log(`使用 ${tmList.length} 条翻译记忆`);\n            }\n            \n            // 发送API请求\n            const response = await fetch(this.apiEndpoint, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${typeof this.apiKey === 'string' ? this.apiKey.trim() : this.apiKey}`,\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify(requestBody)\n            });\n            \n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(`单个翻译API错误 - 状态码: ${response.status}, 错误信息:`, errorText);\n                this.logCallback(`翻译API错误: ${response.status} - ${errorText}`, 'error');\n                throw new Error(`翻译API错误: ${response.status}`);\n            }\n            \n            const data = await response.json();\n            \n            if (!data.choices?.[0]?.message?.content) {\n                console.error('翻译返回数据格式错误:', data);\n                this.logCallback('翻译返回数据格式错误', 'error');\n                throw new Error('翻译返回数据格式错误');\n            }\n            \n            // 获取翻译结果\n            const translatedContent = data.choices[0].message.content;\n            task.text = typeof translatedContent === 'string' ? \n                translatedContent.trim() : String(translatedContent);\n            \n            console.log(`单个翻译成功 - 行号: ${task.rowIndex + 1}, 译文: ${task.text}`);\n            return true;\n            \n        } catch (error) {\n            console.error('单个翻译失败:', error);\n            this.logCallback(`翻译失败: ${error.message}`, 'error');\n            return false;\n        }\n    }\n}\n\n// 导出翻译服务实例\nexport const translationService = new TranslationService();\n","import { TranslationService, translationService } from './translator.js';\n\n/**\n * 翻译管理器\n */\nexport class TranslationManager {\n    /**\n     * 创建翻译管理器\n     * @param {string} apiKey - API密钥\n     * @param {Function} logCallback - 日志回调函数\n     * @param {Object} progressBar - 进度条对象\n     */\n    constructor(apiKey, logCallback, progressBar) {\n        this.apiKey = apiKey;\n        this.log = logCallback;\n        this.progressBar = progressBar;\n        this.shouldStopTranslation = false;\n    }\n\n    /**\n     * 停止翻译\n     */\n    stopTranslation() {\n        this.shouldStopTranslation = true;\n    }\n\n    /**\n     * 创建批次\n     * @param {Array} items - 项目数组\n     * @param {number} batchSize - 批次大小\n     * @returns {Array} - 批次数组\n     */\n    createBatches(items, batchSize) {\n        const batches = [];\n        for (let i = 0; i < items.length; i += batchSize) {\n            batches.push(items.slice(i, i + batchSize));\n        }\n        return batches;\n    }\n\n    /**\n     * 准备翻译任务\n     * @param {Array} rows - 数据行\n     * @param {number} sourceColumnIndex - 源文本列索引\n     * @param {Array} targetColumns - 目标列配置\n     * @returns {Array} - 翻译任务数组\n     */\n    prepareTranslationTasks(rows, sourceColumnIndex, targetColumns) {\n        const translationTasks = [];\n        \n        // 遍历所有行，收集需要翻译的任务\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            const row = rows[rowIndex];\n            \n            // 检查源文本是否存在\n            const sourceText = row[sourceColumnIndex];\n            if (!sourceText || typeof sourceText !== 'string' || sourceText.trim() === '') {\n                continue; // 跳过空源文本\n            }\n            \n            // 遍历所有目标列\n            for (const targetColumn of targetColumns) {\n                const targetColumnIndex = targetColumn.index;\n                // 使用targetLang属性，如果不存在则使用langCode属性\n                const targetLang = targetColumn.targetLang || targetColumn.langCode;\n                \n                // 检查目标单元格是否已有内容\n                const targetText = row[targetColumnIndex];\n                if (targetText && typeof targetText === 'string' && targetText.trim() !== '') {\n                    continue; // 跳过已有内容的目标单元格\n                }\n                \n                // 创建翻译任务\n                translationTasks.push({\n                    rowIndex,\n                    sourceColumnIndex,\n                    targetColumnIndex,\n                    targetLang,\n                    text: sourceText\n                });\n            }\n        }\n        \n        return translationTasks;\n    }\n    \n    /**\n     * 将任务按目标语言分组并组织成批次\n     * @param {Array} tasks - 翻译任务数组\n     * @param {number} batchSize - 批次大小\n     * @returns {Array} - 批次数组\n     */\n    organizeTasksIntoBatches(tasks, batchSize = 20) {\n        // 按目标语言分组\n        const tasksByLanguage = {};\n        for (const task of tasks) {\n            const lang = task.targetLang;\n            if (!tasksByLanguage[lang]) {\n                tasksByLanguage[lang] = [];\n            }\n            tasksByLanguage[lang].push(task);\n        }\n        \n        // 为每种语言创建批次\n        const batches = [];\n        let batchId = 1;\n        \n        for (const lang in tasksByLanguage) {\n            const langTasks = tasksByLanguage[lang];\n            const langBatches = this.createBatches(langTasks, batchSize);\n            \n            for (const batch of langBatches) {\n                batches.push({\n                    batchId: batchId++,\n                    tasks: batch,\n                    success: false,\n                    completed: 0\n                });\n            }\n        }\n        \n        return batches;\n    }\n    \n    /**\n     * 执行翻译过程\n     * @param {Array} rows - 数据行\n     * @param {number} sourceColumnIndex - 源列索引\n     * @param {string} sourceLang - 源语言\n     * @param {Array} targetColumns - 目标列数组\n     * @param {Function} updateCellCallback - 更新单元格回调函数\n     * @returns {Promise<void>}\n     */\n    async executeTranslation(rows, sourceColumnIndex, sourceLang, targetColumns, updateCellCallback) {\n        try {\n            // 1. 收集所有需要翻译的源文本和目标单元格\n            this.log('正在收集需要翻译的内容...', 'info');\n            const translationTasks = this.prepareTranslationTasks(rows, sourceColumnIndex, targetColumns);\n            \n            if (translationTasks.length === 0) {\n                this.log('没有找到需要翻译的内容', 'warning');\n                return;\n            }\n            \n            this.log(`找到 ${translationTasks.length} 个需要翻译的单元格`, 'info');\n            \n            // 2. 将任务按目标语言分组，然后每组最多20条\n            const batches = this.organizeTasksIntoBatches(translationTasks);\n            \n            // 3. 使用翻译服务实例\n            const translationService = new TranslationService(this.apiKey, this.log);\n            \n            // 4. 开始批量翻译\n            const totalBatches = batches.length;\n            let completedBatches = 0;\n            \n            this.log(`开始处理 ${totalBatches} 个翻译批次`, 'info');\n            \n            for (let i = 0; i < batches.length; i++) {\n                if (this.shouldStopTranslation) {\n                    this.log('翻译已被用户停止', 'warning');\n                    break;\n                }\n                \n                const batch = batches[i];\n                const currentBatchId = i + 1;\n                \n                // 更新进度\n                this.progressBar.updateBatchProgress({\n                    completedBatches,\n                    totalBatches,\n                    currentBatchId,\n                    completedTasksInCurrentBatch: 0,\n                    totalTasksInCurrentBatch: batch.tasks.length\n                });\n                \n                try {\n                    const success = await translationService.translateBatch(batch, sourceLang);\n                    completedBatches++;\n                    \n                    // 更新进度\n                    this.progressBar.updateBatchProgress({\n                        completedBatches,\n                        totalBatches,\n                        currentBatchId: 0, // 当前批次已完成\n                        completedTasksInCurrentBatch: batch.tasks.length,\n                        totalTasksInCurrentBatch: batch.tasks.length\n                    });\n                    \n                    // 只有翻译成功时才更新单元格\n                    if (success) {\n                        // 每个批次完成后更新单元格，但不重新渲染整个表格\n                        let tasksWithResults = 0;\n                        let tasksWithoutResults = 0;\n                        \n                        for (const task of batch.tasks) {\n                            // 只有当任务有翻译结果时才更新单元格\n                            if (task.text && typeof task.text === 'string' && task.text.trim() !== '') {\n                                // 更新数据模型\n                                rows[task.rowIndex][task.targetColumnIndex] = task.text;\n                                \n                                // 直接更新DOM中的单元格内容，而不是重新渲染整个表格\n                                updateCellCallback(task.rowIndex + 2, task.targetColumnIndex, task.text);\n                                tasksWithResults++;\n                            } else {\n                                tasksWithoutResults++;\n                            }\n                        }\n                        \n                        if (tasksWithoutResults > 0) {\n                            this.log(`警告: ${tasksWithoutResults} 个单元格未获得翻译结果`, 'warning');\n                        }\n                    }\n                    \n                    this.log(`批次 ${currentBatchId}/${totalBatches} 完成`, 'success');\n                } catch (error) {\n                    this.log(`批次 ${currentBatchId}/${totalBatches} 失败: ${error.message}`, 'error');\n                }\n            }\n            \n            this.log(`翻译任务完成: ${completedBatches}/${totalBatches} 个批次`, \n                completedBatches === totalBatches ? 'success' : 'warning');\n            \n        } catch (error) {\n            this.log(`翻译过程出错: ${error.message}`, 'error');\n            console.error('翻译过程出错:', error);\n        }\n    }\n}\n","/**\n * 语言工具类\n */\nexport class LanguageUtils {\n    /**\n     * 获取源语言列表\n     * @returns {Array} - 源语言列表\n     */\n    static getSourceLanguages() {\n        return ['Chinese', 'English'];\n    }\n\n    /**\n     * 获取源语言配置\n     * @returns {Object} - 源语言配置对象\n     */\n    static getSourceLanguageConfig() {\n        return {\n            'Chinese': 'Chinese',\n            'English': 'English'\n        };\n    }\n\n    /**\n     * 获取语言映射\n     * @returns {Array} - 语言映射数组\n     */\n    static getLanguageMappings() {\n        return [\n            { columnHeader: '英语', targetLang: 'English' },\n            { columnHeader: '日语', targetLang: 'Japanese' },\n            { columnHeader: '韩语', targetLang: 'Korean' },\n            { columnHeader: '西班牙语', targetLang: 'Spanish' },\n            { columnHeader: '法语', targetLang: 'French' },\n            { columnHeader: '德语', targetLang: 'German' },\n            { columnHeader: '俄语', targetLang: 'Russian' },\n            { columnHeader: '泰语', targetLang: 'Thai' },\n            { columnHeader: '意大利语', targetLang: 'Italian' },\n            { columnHeader: '印尼语', targetLang: 'Indonesian' },\n            { columnHeader: '葡萄牙语', targetLang: 'Portuguese' }\n        ];\n    }\n\n    /**\n     * 获取语言显示名称\n     * @param {string} langCode - 语言代码\n     * @returns {string} - 语言显示名称\n     */\n    static getLanguageDisplayName(langCode) {\n        // 简单返回语言代码，因为我们不再使用详细的映射\n        return langCode;\n    }\n\n    /**\n     * 获取API语言代码\n     * @param {string} langCode - 语言代码\n     * @returns {string} - API语言代码\n     */\n    static getApiLanguageCode(langCode) {\n        // 直接返回英文全拼的语言代码\n        return langCode;\n    }\n\n    /**\n     * 根据列标题查找语言\n     * @param {string} columnHeader - 列标题\n     * @returns {string|null} - 语言代码或null\n     */\n    static findLanguageByColumnHeader(columnHeader) {\n        if (!columnHeader) return null;\n        \n        const mappings = this.getLanguageMappings();\n        for (const mapping of mappings) {\n            if (mapping.columnHeader === columnHeader) {\n                return mapping.targetLang;\n            }\n        }\n        \n        // 特殊处理源语言\n        if (columnHeader === '简体中文' || columnHeader === '中文') {\n            return 'Chinese';\n        }\n        \n        return null;\n    }\n}\n","import * as XLSX from 'xlsx';\nimport { ProgressBar } from './components/progress.js';\nimport { Logger } from './components/Logger.js';\nimport { TableRenderer } from './components/TableRenderer.js';\nimport { TranslationManager } from './services/TranslationManager.js';\nimport { LanguageUtils } from './utils/LanguageUtils.js';\nimport { readExcelFile, createExcelWorkbook } from './utils/excel.js';\n\n/**\n * Excel翻译器类\n */\nexport class ExcelTranslator {\n    // 静态属性，用于跟踪事件监听器是否已初始化\n    static _eventsInitialized = false;\n    \n    /**\n     * 创建Excel翻译器实例\n     */\n    constructor() {\n        console.log('ExcelTranslator 构造函数被调用');\n        \n        // 初始化UI元素\n        this.tableOutput = document.getElementById('tableOutput');\n        this.logOutput = document.getElementById('logOutput');\n        \n        // 初始化组件\n        this.logger = new Logger(this.logOutput);\n        this.progressBar = new ProgressBar();\n        this.tableRenderer = new TableRenderer(this.tableOutput);\n        \n        // 初始化数据\n        this.data = {};\n        this.currentSheet = null;\n        this.currentFileName = '';\n        this.apiKey = '';\n        this.shouldStopTranslation = false;\n        this.sourceLangSelect = null;\n        \n        // 优先从环境变量获取API密钥\n        if (process.env.ALI_API_KEY) {\n            this.apiKey = process.env.ALI_API_KEY;\n            console.log('已从环境变量加载API密钥');\n        }\n        \n        // 初始化UI和事件监听器\n        this.initializeUI();\n        this.initializeEventListeners();\n    }\n\n    /**\n     * 初始化UI\n     */\n    initializeUI() {\n        // 初始化进度条\n        this.progressBar.show();\n        this.progressBar.updateProgress({ current: 0, total: 100 });\n        this.progressBar.hide();\n\n        // 绑定停止按钮事件\n        const stopBtn = document.getElementById('stopTranslateBtn');\n        if (stopBtn) {\n            // 移除可能存在的旧事件监听器\n            const newStopBtn = stopBtn.cloneNode(true);\n            stopBtn.parentNode.replaceChild(newStopBtn, stopBtn);\n            \n            newStopBtn.addEventListener('click', () => {\n                this.shouldStopTranslation = true;\n                newStopBtn.disabled = true;\n                this.logger.log('正在停止翻译...', 'warning');\n            });\n        }\n    }\n\n    /**\n     * 初始化事件监听器\n     */\n    initializeEventListeners() {\n        console.log('initializeEventListeners 被调用', new Error().stack);\n        \n        // 防止重复注册事件监听器 - 使用静态属性\n        if (ExcelTranslator._eventsInitialized) {\n            console.log('事件监听器已初始化，跳过重复注册');\n            return;\n        }\n        \n        const fileInput = document.getElementById('fileInput');\n        const uploadBtn = document.getElementById('uploadBtn');\n        const translateBtn = document.getElementById('translateBtn');\n        const exportBtn = document.getElementById('exportBtn');\n        const actionButtons = document.getElementById('actionButtons');\n        this.sourceLangSelect = document.getElementById('sourceLang');\n\n        console.log('找到的UI元素:', { \n            fileInput: !!fileInput, \n            uploadBtn: !!uploadBtn, \n            translateBtn: !!translateBtn, \n            exportBtn: !!exportBtn \n        });\n\n        // 处理文件选择按钮点击\n        if (uploadBtn) {\n            console.log('为uploadBtn添加点击事件监听器');\n            uploadBtn.addEventListener('click', () => {\n                console.log('uploadBtn被点击');\n                fileInput?.click();\n            });\n        }\n\n        if (fileInput) {\n            console.log('为fileInput添加change事件监听器');\n            fileInput.addEventListener('change', (e) => {\n                console.log('fileInput change事件触发');\n                this.handleFileSelect(e);\n                if (actionButtons) {\n                    actionButtons.style.display = 'block';\n                }\n            });\n        }\n        \n        if (translateBtn) {\n            console.log('为translateBtn添加点击事件监听器');\n            translateBtn.addEventListener('click', () => {\n                console.log('translateBtn被点击');\n                this.handleTranslateClick();\n            });\n        }\n        \n        if (exportBtn) {\n            console.log('为exportBtn添加点击事件监听器');\n            exportBtn.addEventListener('click', () => {\n                console.log('exportBtn被点击');\n                this.exportToExcel();\n            });\n        }\n        \n        // 标记事件监听器已初始化\n        ExcelTranslator._eventsInitialized = true;\n        console.log('事件监听器初始化完成');\n    }\n\n    /**\n     * 处理文件选择事件\n     * @param {Event} event - 文件选择事件\n     */\n    async handleFileSelect(event) {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        try {\n            this.currentFileName = file.name;\n            this.logger.log(`正在读取文件: ${file.name}`, 'info');\n            this.progressBar.show();\n            \n            // 读取Excel文件\n            this.data = await readExcelFile(file);\n            \n            // 更新工作表选择器\n            this.updateSheetSelector(Object.keys(this.data));\n            \n            // 显示第一个工作表\n            if (Object.keys(this.data).length > 0) {\n                this.currentSheet = Object.keys(this.data)[0];\n                this.displaySheet();\n                this.logger.log(`已加载工作表: ${this.currentSheet}`, 'success');\n            }\n            \n            // 尝试自动检测源语言列\n            this.autoDetectSourceLanguage();\n            \n        } catch (error) {\n            this.logger.log(`读取文件失败: ${error.message}`, 'error');\n            console.error('文件读取错误:', error);\n        } finally {\n            this.progressBar.hide();\n        }\n    }\n\n    /**\n     * 自动检测源语言列\n     */\n    autoDetectSourceLanguage() {\n        if (!this.currentSheet || !this.data[this.currentSheet] || !this.sourceLangSelect) return;\n        \n        const { headerRows } = this.data[this.currentSheet];\n        if (headerRows.length < 2) return;\n        \n        // 获取表头行\n        const headerRow = headerRows[1];\n        \n        // 遍历所有列标题，尝试匹配语言\n        for (let i = 0; i < headerRow.length; i++) {\n            const columnHeader = headerRow[i];\n            const language = LanguageUtils.findLanguageByColumnHeader(columnHeader);\n            \n            if (language === 'Chinese') {\n                // 如果找到中文列，设置为源语言\n                this.sourceLangSelect.value = 'Chinese';\n                this.logger.log(`已自动检测到源语言列: ${columnHeader} (列 ${this.getExcelColumnName(i)})`, 'info');\n                break;\n            }\n        }\n    }\n\n    /**\n     * 更新工作表选择器\n     * @param {Array} sheets - 工作表名称数组\n     */\n    updateSheetSelector(sheets) {\n        const sheetSelector = document.getElementById('sheetSelector');\n        if (!sheetSelector) return;\n\n        // 清除现有选项\n        sheetSelector.innerHTML = '';\n\n        // 添加新选项\n        sheets.forEach(sheetName => {\n            const option = document.createElement('option');\n            option.value = sheetName;\n            option.textContent = sheetName;\n            sheetSelector.appendChild(option);\n        });\n        \n        // 添加工作表切换事件\n        sheetSelector.addEventListener('change', () => {\n            this.currentSheet = sheetSelector.value;\n            this.displaySheet();\n            this.logger.log(`已切换到工作表: ${this.currentSheet}`, 'info');\n        });\n    }\n\n    /**\n     * 显示当前工作表\n     */\n    displaySheet() {\n        if (!this.tableOutput || !this.currentSheet || !this.data[this.currentSheet]) {\n            console.error('无法显示表格：', {\n                tableOutput: !!this.tableOutput,\n                currentSheet: this.currentSheet,\n                hasData: this.data[this.currentSheet] ? true : false\n            });\n            return;\n        }\n\n        const sheetData = this.data[this.currentSheet];\n        \n        // 使用TableRenderer渲染表格\n        this.tableRenderer.renderTable(sheetData, (rowIndex, colIndex, content) => {\n            // 单元格编辑回调\n            if (rowIndex < sheetData.headerRows.length) {\n                sheetData.headerRows[rowIndex][colIndex] = content;\n            } else {\n                const dataRowIndex = rowIndex - sheetData.headerRows.length;\n                // 确保数据行数组有足够的长度\n                while (sheetData.rows.length <= dataRowIndex) {\n                    sheetData.rows.push([]);\n                }\n                // 确保数据行有足够的列\n                while (sheetData.rows[dataRowIndex].length <= colIndex) {\n                    sheetData.rows[dataRowIndex].push('');\n                }\n                sheetData.rows[dataRowIndex][colIndex] = content;\n            }\n        });\n    }\n\n    /**\n     * 处理翻译按钮点击事件\n     */\n    async handleTranslateClick() {\n        if (!this.currentSheet || !this.data[this.currentSheet]) {\n            this.logger.log('没有可翻译的数据', 'warning');\n            return;\n        }\n\n        const translateBtn = document.getElementById('translateBtn');\n        const stopBtn = document.getElementById('stopTranslateBtn');\n        \n        // 显示停止按钮，隐藏翻译按钮\n        if (translateBtn) translateBtn.style.display = 'none';\n        if (stopBtn) {\n            stopBtn.style.display = 'inline-block';\n            stopBtn.disabled = false;\n        }\n        \n        // 重置停止标志\n        this.shouldStopTranslation = false;\n        \n        // 显示进度条\n        this.progressBar.show();\n        this.progressBar.updateProgress({ current: 0, total: 100 });\n        \n        // 获取API密钥，优先使用环境变量中的ALI_API_KEY\n        if (process.env.ALI_API_KEY) {\n            this.apiKey = process.env.ALI_API_KEY;\n            console.log('使用环境变量中的API密钥');\n        } else {\n            this.apiKey = document.getElementById('apiKey')?.value || '';\n        }\n        \n        if (!this.apiKey) {\n            this.logger.log('请输入API密钥', 'error');\n            translateBtn.style.display = 'inline-block';\n            stopBtn.style.display = 'none';\n            this.progressBar.hide();\n            return;\n        }\n        \n        // 获取源语言\n        const sourceLang = this.sourceLangSelect?.value || 'Chinese';\n        const sourceApiCode = LanguageUtils.getApiLanguageCode(sourceLang);\n        \n        // 查找源语言列\n        const { headerRows, rows } = this.data[this.currentSheet];\n        if (headerRows.length < 2) {\n            this.logger.log('错误：表格缺少表头行', 'error');\n            translateBtn.style.display = 'inline-block';\n            stopBtn.style.display = 'none';\n            this.progressBar.hide();\n            return;\n        }\n        \n        const headerRow = headerRows[1];\n        let sourceColumnIndex = -1;\n        \n        // 查找源语言列\n        for (let i = 0; i < headerRow.length; i++) {\n            const columnHeader = headerRow[i];\n            const language = LanguageUtils.findLanguageByColumnHeader(columnHeader);\n            const sourceLanguageConfig = LanguageUtils.getSourceLanguageConfig();\n            \n            if (language === sourceLanguageConfig[LanguageUtils.getLanguageDisplayName(sourceLang)]) {\n                sourceColumnIndex = i;\n                break;\n            }\n        }\n        \n        if (sourceColumnIndex === -1) {\n            this.logger.log(`错误：找不到源语言(${LanguageUtils.getLanguageDisplayName(sourceLang)})列`, 'error');\n            translateBtn.style.display = 'inline-block';\n            stopBtn.style.display = 'none';\n            this.progressBar.hide();\n            return;\n        }\n        \n        // 查找所有目标语言列\n        const targetColumns = [];\n        const sourceLanguageConfig = LanguageUtils.getSourceLanguageConfig();\n        \n        for (let i = 0; i < headerRow.length; i++) {\n            if (i === sourceColumnIndex) continue;\n            \n            const columnHeader = headerRow[i];\n            const language = LanguageUtils.findLanguageByColumnHeader(columnHeader);\n            \n            if (language && language !== sourceLanguageConfig[LanguageUtils.getLanguageDisplayName(sourceLang)]) {\n                targetColumns.push({\n                    index: i,\n                    langCode: language,\n                    display: columnHeader\n                });\n            }\n        }\n        \n        if (targetColumns.length === 0) {\n            this.logger.log('错误：找不到任何目标语言列', 'error');\n            translateBtn.style.display = 'inline-block';\n            stopBtn.style.display = 'none';\n            this.progressBar.hide();\n            return;\n        }\n        \n        this.logger.log(`开始翻译，源语言: ${LanguageUtils.getLanguageDisplayName(sourceLang)} (列 ${this.getExcelColumnName(sourceColumnIndex)})`, 'info');\n        this.logger.log('目标语言: ' + targetColumns.map(c => `${c.display} (列 ${this.getExcelColumnName(c.index)})`).join(', '), 'info');\n        \n        try {\n            // 创建翻译管理器\n            const translationManager = new TranslationManager(\n                this.apiKey, \n                this.logger.log.bind(this.logger),\n                this.progressBar\n            );\n            \n            // 设置停止按钮事件\n            if (stopBtn) {\n                // 移除可能存在的旧事件监听器\n                const newStopBtn = stopBtn.cloneNode(true);\n                stopBtn.parentNode.replaceChild(newStopBtn, stopBtn);\n                \n                newStopBtn.onclick = () => {\n                    this.shouldStopTranslation = true;\n                    translationManager.stopTranslation();\n                    newStopBtn.disabled = true;\n                    this.logger.log('正在停止翻译...', 'warning');\n                };\n            }\n            \n            // 执行翻译\n            await translationManager.executeTranslation(\n                rows,\n                sourceColumnIndex,\n                sourceLang,\n                targetColumns,\n                (rowIndex, colIndex, text) => {\n                    // 更新单元格回调\n                    this.tableRenderer.updateCellInDOM(rowIndex, colIndex, text, headerRows.length);\n                }\n            );\n            \n        } catch (error) {\n            console.error('翻译过程出错:', error);\n            this.logger.log(`翻译过程出错: ${error.message || String(error)}`, 'error');\n        } finally {\n            translateBtn.style.display = 'inline-block';\n            stopBtn.style.display = 'none';\n            stopBtn.disabled = true;\n            this.progressBar.hide();\n        }\n    }\n\n    /**\n     * 导出到Excel\n     */\n    async exportToExcel() {\n        if (!this.currentSheet || !this.data[this.currentSheet]) {\n            this.logger.log('没有可导出的数据', 'warning');\n            return;\n        }\n\n        try {\n            const workbook = createExcelWorkbook(this.data);\n            XLSX.writeFile(workbook, `${this.currentFileName.replace('.xlsx', '')}_translated.xlsx`);\n            this.logger.log('导出成功', 'success');\n        } catch (error) {\n            if (error instanceof Error) {\n                this.logger.log(`导出失败: ${error.message}`, 'error');\n            } else {\n                this.logger.log('导出失败: 未知错误', 'error');\n            }\n        }\n    }\n\n    /**\n     * 获取Excel列名\n     * @param {number} index - 列索引\n     * @returns {string} - 列名\n     */\n    getExcelColumnName(index) {\n        return this.tableRenderer.getExcelColumnName(index);\n    }\n}\n","import * as XLSX from 'xlsx';\n\n/**\n * 读取Excel文件并解析内容\n * @param {File} file - Excel文件\n * @returns {Promise<Object>} - 解析后的数据，按工作表名称组织\n */\nexport function readExcelFile(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        \n        reader.onload = (e) => {\n            try {\n                const data = e.target?.result;\n                const workbook = XLSX.read(data, { type: 'binary' });\n                const result = {};\n\n                workbook.SheetNames.forEach(sheetName => {\n                    const worksheet = workbook.Sheets[sheetName];\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n                    \n                    // 分离表头行和数据行\n                    const headerRows = jsonData.slice(0, 2);\n                    const rows = jsonData.slice(2);\n\n                    result[sheetName] = {\n                        headerRows,\n                        rows\n                    };\n                });\n\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        };\n\n        reader.onerror = () => {\n            reject(new Error('文件读取失败'));\n        };\n\n        reader.readAsBinaryString(file);\n    });\n}\n\n/**\n * 创建Excel工作簿\n * @param {Object} data - 数据对象，按工作表名称组织\n * @returns {XLSX.WorkBook} - 创建的工作簿\n */\nexport function createExcelWorkbook(data) {\n    const workbook = XLSX.utils.book_new();\n\n    Object.entries(data).forEach(([sheetName, sheetData]) => {\n        const allRows = [...sheetData.headerRows, ...sheetData.rows];\n        const worksheet = XLSX.utils.aoa_to_sheet(allRows);\n        XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\n    });\n\n    return workbook;\n}\n\n/**\n * 获取Excel列名\n * @param {number} index - 列索引\n * @returns {string} - 列名（如A, B, AA等）\n */\nexport function getExcelColumnName(index) {\n    let columnName = '';\n    while (index >= 0) {\n        columnName = String.fromCharCode(65 + (index % 26)) + columnName;\n        index = Math.floor(index / 26) - 1;\n    }\n    return columnName;\n}\n","import './styles.css';\nimport { ExcelTranslator } from './ExcelTranslator.js';\n\nconsole.log('index.js 被加载');\n\n// 初始化应用\nwindow.addEventListener('DOMContentLoaded', () => {\n    console.log('DOMContentLoaded 事件触发');\n    \n    // 检查是否已经有实例\n    if (window.excelTranslatorInstance) {\n        console.log('已存在 ExcelTranslator 实例，不再创建新实例');\n        return;\n    }\n    \n    console.log('创建新的 ExcelTranslator 实例');\n    window.excelTranslatorInstance = new ExcelTranslator();\n    console.log('ExcelTranslator 实例创建完成');\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.j = 792;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkexcel_to_structured_data\"] = self[\"webpackChunkexcel_to_structured_data\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","__webpack_require__.nc = undefined;","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [121], () => (__webpack_require__(6644)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","ProgressBar","constructor","this","progressContainer","document","querySelector","progressFill","progressText","progressDetails","progressBatchCounter","createElement","className","style","textAlign","marginTop","fontSize","color","parentNode","insertBefore","nextSibling","updateProgress","data","percentage","current","total","width","textContent","Math","round","text","updateBatchProgress","progress","overallPercentage","completedBatches","totalBatches","currentBatchId","batchProgress","completedTasksInCurrentBatch","totalTasksInCurrentBatch","reset","show","display","hide","Logger","container","log","message","type","logEntry","Date","toLocaleTimeString","appendChild","scrollTop","scrollHeight","TableRenderer","getExcelColumnName","index","columnName","String","fromCharCode","floor","updateCellInDOM","rowIndex","colIndex","headerRowsCount","tableWrapper","table","rows","querySelectorAll","targetRow","i","length","row","rowNumberCell","toString","children","cell","renderTable","sheetData","onCellEdit","innerHTML","headerRows","allRows","maxColumns","max","map","colNumberRow","emptyTh","th","forEach","tr","td","contentEditable","addEventListener","addTableStyles","styleId","getElementById","id","head","embeddingService","ollamaUrl","modelName","qdrantUrl","collectionName","vectorSize","qdrantClient","url","checkCompatibility","timeout","console","initializeCollection","getCollections","collections","some","c","name","createCollection","vectors","size","distance","error","generateEmbedding","trim","substring","response","method","headers","body","JSON","stringify","model","prompt","ok","errorText","Error","status","statusText","json","embedding","storeEmbedding","metadata","success","uuid","randomUUID","upsert","wait","points","vector","payload","storeEntryVectors","entry","collectionError","chinese","Chinese","english","English","japanese","Japanese","korean","Korean","spanish","Spanish","french","French","german","German","russian","Russian","thai","Thai","italian","Italian","indonesian","Indonesian","portuguese","Portuguese","vector_cn","vector_en","cnEmbedding","cnError","enEmbedding","enError","point","upsertError","retryError","updateEntryVectors","searchSimilar","language","limit","searchResults","search","with_payload","with_vectors","result","similarity","calculateCosineSimilarity","score","sort","a","b","vec1","vec2","dotProduct","norm1","norm2","sqrt","deleteEmbedding","delete","TranslationService","apiKey","logCallback","apiEndpoint","shouldStopTranslation","stopTranslation","resetStopFlag","getTranslationMemory","sourceLanguage","targetLanguage","vectorLanguage","similarEntries","sourceField","targetField","tmList","source","target","push","translateBatch","batch","rowIndices","tasks","task","minRow","min","maxRow","rowRange","targetLang","batchId","validTasks","filter","undefined","translateSingle","messages","role","content","t","join","translation_options","source_lang","target_lang","temperature","max_tokens","responseText","parse","choices","translatedContent","translatedLines","split","minLength","translatedLine","missingCount","textType","requestBody","tm_list","TranslationManager","progressBar","createBatches","items","batchSize","batches","slice","prepareTranslationTasks","sourceColumnIndex","targetColumns","translationTasks","sourceText","targetColumn","targetColumnIndex","langCode","targetText","organizeTasksIntoBatches","tasksByLanguage","lang","langTasks","langBatches","completed","executeTranslation","sourceLang","updateCellCallback","translationService","tasksWithResults","tasksWithoutResults","LanguageUtils","getSourceLanguages","getSourceLanguageConfig","getLanguageMappings","columnHeader","getLanguageDisplayName","getApiLanguageCode","findLanguageByColumnHeader","mappings","mapping","ExcelTranslator","static","tableOutput","logOutput","logger","tableRenderer","currentSheet","currentFileName","sourceLangSelect","initializeUI","initializeEventListeners","stopBtn","newStopBtn","cloneNode","replaceChild","disabled","stack","_eventsInitialized","fileInput","uploadBtn","translateBtn","exportBtn","actionButtons","click","e","handleFileSelect","handleTranslateClick","exportToExcel","event","file","files","Promise","resolve","reject","reader","FileReader","onload","workbook","SheetNames","sheetName","worksheet","Sheets","jsonData","sheet_to_json","header","onerror","readAsBinaryString","readExcelFile","updateSheetSelector","Object","keys","displaySheet","autoDetectSourceLanguage","headerRow","value","sheets","sheetSelector","option","hasData","dataRowIndex","sourceLanguageConfig","translationManager","bind","onclick","book_new","entries","aoa_to_sheet","book_append_sheet","createExcelWorkbook","replace","window","excelTranslatorInstance","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","key","splice","r","n","getter","__esModule","d","definition","o","defineProperty","enumerable","get","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","nc","__webpack_exports__"],"sourceRoot":""}