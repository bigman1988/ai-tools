{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://ai-translate/webpack/runtime/chunk loaded","webpack://ai-translate/./src/components/progress.js","webpack://ai-translate/./src/components/Logger.js","webpack://ai-translate/./src/components/TableRenderer.js","webpack://ai-translate/./src/services/embedding.js","webpack://ai-translate/./src/services/embedding-instance.js","webpack://ai-translate/./src/utils/LanguageUtils.js","webpack://ai-translate/./src/services/translator.js","webpack://ai-translate/./src/services/TranslationManager.js","webpack://ai-translate/./src/ExcelTranslator.js","webpack://ai-translate/./src/utils/excel.js","webpack://ai-translate/./src/index.js","webpack://ai-translate/webpack/bootstrap","webpack://ai-translate/webpack/runtime/compat get default export","webpack://ai-translate/webpack/runtime/define property getters","webpack://ai-translate/webpack/runtime/global","webpack://ai-translate/webpack/runtime/hasOwnProperty shorthand","webpack://ai-translate/webpack/runtime/node module decorator","webpack://ai-translate/webpack/runtime/runtimeId","webpack://ai-translate/webpack/runtime/jsonp chunk loading","webpack://ai-translate/webpack/runtime/nonce","webpack://ai-translate/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","/**\n * 进度条组件\n */\nexport class ProgressBar {\n    /**\n     * 创建进度条组件\n     */\n    constructor() {\n        this.progressContainer = document.querySelector('.progress-container');\n        this.progressFill = document.querySelector('.progress-fill');\n        this.progressText = document.querySelector('.progress-text');\n        this.progressDetails = document.querySelector('.progress-details');\n        \n        // 创建批次计数器元素\n        this.progressBatchCounter = document.createElement('div');\n        this.progressBatchCounter.className = 'progress-batch-counter';\n        this.progressBatchCounter.style.textAlign = 'center';\n        this.progressBatchCounter.style.marginTop = '5px';\n        this.progressBatchCounter.style.fontSize = '14px';\n        this.progressBatchCounter.style.color = '#666';\n        \n        // 将批次计数器添加到进度条容器后面\n        this.progressContainer.parentNode?.insertBefore(\n            this.progressBatchCounter, \n            this.progressContainer.nextSibling\n        );\n    }\n\n    /**\n     * 更新进度\n     * @param {Object} data - 进度数据\n     * @param {number} data.current - 当前进度\n     * @param {number} data.total - 总进度\n     * @param {string} [data.text] - 进度文本\n     */\n    updateProgress(data) {\n        const percentage = (data.current / data.total) * 100;\n        this.progressFill.style.width = `${percentage}%`;\n        this.progressText.textContent = `${Math.round(percentage)}%`;\n        \n        if (data.text) {\n            this.progressDetails.textContent = data.text;\n        }\n    }\n    \n    /**\n     * 更新批次进度\n     * @param {Object} progress - 批次进度数据\n     * @param {number} progress.completedBatches - 已完成批次数\n     * @param {number} progress.totalBatches - 总批次数\n     * @param {number} progress.currentBatchId - 当前批次ID\n     * @param {number} progress.completedTasksInCurrentBatch - 当前批次已完成任务数\n     * @param {number} progress.totalTasksInCurrentBatch - 当前批次总任务数\n     */\n    updateBatchProgress(progress) {\n        // 更新总体进度\n        const overallPercentage = (progress.completedBatches / progress.totalBatches) * 100;\n        this.progressFill.style.width = `${overallPercentage}%`;\n        this.progressText.textContent = `${Math.round(overallPercentage)}%`;\n        \n        // 更新批次计数器\n        this.progressBatchCounter.textContent = `批次进度: ${progress.completedBatches}/${progress.totalBatches}`;\n        \n        // 更新详细信息\n        if (progress.currentBatchId > 0) {\n            const batchProgress = (progress.completedTasksInCurrentBatch / progress.totalTasksInCurrentBatch) * 100;\n            this.progressDetails.textContent = `当前批次 ${progress.currentBatchId}/${progress.totalBatches}: 完成 ${Math.round(batchProgress)}%`;\n        }\n    }\n\n    /**\n     * 重置进度条\n     */\n    reset() {\n        this.progressFill.style.width = '0%';\n        this.progressText.textContent = '0%';\n        this.progressDetails.textContent = '';\n    }\n\n    /**\n     * 显示进度条\n     */\n    show() {\n        this.progressContainer.style.display = 'block';\n    }\n\n    /**\n     * 隐藏进度条\n     */\n    hide() {\n        this.progressContainer.style.display = 'none';\n    }\n}\n","/**\n * 日志记录器组件\n */\nexport class Logger {\n    /**\n     * 创建日志记录器\n     * @param {HTMLElement} container - 日志容器元素\n     */\n    constructor(container) {\n        this.container = container;\n    }\n\n    /**\n     * 记录日志消息\n     * @param {string} message - 日志消息\n     * @param {string} type - 日志类型 (info, warning, error, success)\n     */\n    log(message, type = 'info') {\n        if (!this.container) return;\n\n        const logEntry = document.createElement('div');\n        logEntry.className = `log-entry ${type}`;\n        logEntry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;\n        this.container.appendChild(logEntry);\n        this.container.scrollTop = this.container.scrollHeight;\n    }\n}\n","/**\n * 表格渲染器组件\n */\nexport class TableRenderer {\n    /**\n     * 创建表格渲染器\n     * @param {HTMLElement} container - 表格容器元素\n     */\n    constructor(container) {\n        this.container = container;\n    }\n\n    /**\n     * 获取Excel列名\n     * @param {number} index - 列索引\n     * @returns {string} - 列名（如A, B, AA等）\n     */\n    getExcelColumnName(index) {\n        let columnName = '';\n        while (index >= 0) {\n            columnName = String.fromCharCode(65 + (index % 26)) + columnName;\n            index = Math.floor(index / 26) - 1;\n        }\n        return columnName;\n    }\n\n    /**\n     * 直接更新DOM中的单元格内容，而不重新渲染整个表格\n     * @param {number} rowIndex 行索引\n     * @param {number} colIndex 列索引\n     * @param {string} text 新的单元格内容\n     * @param {number} headerRowsCount 头部行数量\n     */\n    updateCellInDOM(rowIndex, colIndex, text, headerRowsCount) {\n        if (!this.container) return;\n        \n        const tableWrapper = this.container.querySelector('.table-wrapper');\n        if (!tableWrapper) return;\n        \n        const table = tableWrapper.querySelector('table');\n        if (!table) return;\n        \n        // 如果是头部行，不进行更新\n        if (rowIndex < headerRowsCount) return;\n        \n        // 遍历所有行，找到对应的行\n        const rows = table.querySelectorAll('tr');\n        let targetRow = undefined;\n        \n        for (let i = 0; i < rows.length; i++) {\n            const row = rows[i];\n            const rowNumberCell = row.querySelector('.row-number');\n            if (rowNumberCell && rowNumberCell.textContent === (rowIndex + 1).toString()) {\n                targetRow = row;\n                break;\n            }\n        }\n        \n        if (!targetRow) return;\n        \n        // 找到对应的单元格，注意第一列是行号，所以需要+1\n        if (colIndex + 1 < targetRow.children.length) {\n            const cell = targetRow.children[colIndex + 1];\n            if (cell) {\n                cell.textContent = text;\n            }\n        }\n    }\n\n    /**\n     * 渲染表格\n     * @param {Object} sheetData - 工作表数据\n     * @param {Array} sheetData.headerRows - 头部行\n     * @param {Array} sheetData.rows - 数据行\n     * @param {Function} onCellEdit - 单元格编辑回调\n     */\n    renderTable(sheetData, onCellEdit) {\n        if (!this.container) return;\n\n        // 清空现有内容\n        this.container.innerHTML = '';\n        \n        // 创建表格容器，使用固定头的布局\n        const tableWrapper = document.createElement('div');\n        tableWrapper.className = 'table-wrapper';\n\n        const table = document.createElement('table');\n        table.className = 'excel-table';\n\n        const { headerRows, rows } = sheetData;\n        const allRows = [...headerRows, ...rows];\n\n        // 计算最大列数\n        const maxColumns = Math.max(\n            ...headerRows.map(row => row.length),\n            ...rows.map(row => row.length)\n        );\n\n        // 创建列号行\n        const colNumberRow = document.createElement('tr');\n        const emptyTh = document.createElement('th'); // 左上角空单元格\n        colNumberRow.appendChild(emptyTh);\n        \n        for (let i = 0; i < maxColumns; i++) {\n            const th = document.createElement('th');\n            th.textContent = this.getExcelColumnName(i);\n            th.className = 'column-header';\n            colNumberRow.appendChild(th);\n        }\n        table.appendChild(colNumberRow);\n\n        // 创建表格内容\n        allRows.forEach((row, rowIndex) => {\n            const tr = document.createElement('tr');\n            \n            // 如果不是第二行（索引为1），并且是在前6行内，则隐藏\n            if (rowIndex !== 1 && rowIndex < 6) {\n                tr.style.display = 'none';\n                return;\n            }\n\n            // 添加行号\n            const rowNumberCell = document.createElement('td');\n            rowNumberCell.textContent = (rowIndex + 1).toString();\n            rowNumberCell.className = 'row-number';\n            tr.appendChild(rowNumberCell);\n\n            // 添加数据单元格\n            for (let colIndex = 0; colIndex < maxColumns; colIndex++) {\n                const td = document.createElement(rowIndex < headerRows.length ? 'th' : 'td');\n                td.textContent = row[colIndex] || '';\n                \n                // 设置单元格可编辑\n                if (rowIndex >= headerRows.length) {\n                    td.contentEditable = 'true';\n                }\n                \n                // 添加单元格编辑事件\n                td.addEventListener('input', () => {\n                    onCellEdit(rowIndex, colIndex, td.textContent || '');\n                });\n\n                tr.appendChild(td);\n            }\n\n            table.appendChild(tr);\n        });\n\n        tableWrapper.appendChild(table);\n        this.container.appendChild(tableWrapper);\n        \n        // 添加CSS样式使行号和列头固定\n        this.addTableStyles();\n    }\n\n    /**\n     * 添加表格样式\n     */\n    addTableStyles() {\n        const styleId = 'fixed-table-style';\n        if (!document.getElementById(styleId)) {\n            const style = document.createElement('style');\n            style.id = styleId;\n            style.textContent = `\n                .table-wrapper {\n                    position: relative;\n                    overflow: auto;\n                    height: 99vh;\n                    max-width: 100%;\n                    border: 1px solid #ccc;\n                    margin: 1px;\n                    scroll-padding-top: 40px; /* 添加滚动填充，防止内容被固定头部遮挡 */\n                }\n                \n                .excel-table {\n                    border-collapse: collapse;\n                }\n                \n                .excel-table th, .excel-table td {\n                    border: 1px solid #ddd;\n                    padding: 8px;\n                    min-width: 100px;\n                }\n                \n                .excel-table th:first-child {\n                    position: sticky;\n                    left: 0;\n                    z-index: 3;\n                    background-color: #f2f2f2;\n                }\n                \n                .excel-table thead th {\n                    position: sticky;\n                    top: 0;\n                    z-index: 2;\n                    background-color: #f2f2f2;\n                    box-shadow: 0 1px 0 rgba(0,0,0,0.1); /* 添加底部阴影，增强视觉效果 */\n                }\n                \n                .excel-table tr:first-child th {\n                    position: sticky;\n                    top: 0;\n                    z-index: 2;\n                    background-color: #f2f2f2;\n                    box-shadow: 0 1px 0 rgba(0,0,0,0.1); /* 添加底部阴影，增强视觉效果 */\n                }\n                \n                /* 处理左上角单元格，同时固定在顶部和左侧 */\n                .excel-table tr:first-child th:first-child {\n                    position: sticky;\n                    top: 0;\n                    left: 0;\n                    z-index: 4; /* 最高层级，确保始终显示在最上层 */\n                    background-color: #f2f2f2;\n                    box-shadow: 1px 1px 0 rgba(0,0,0,0.1); /* 添加右侧和底部阴影 */\n                }\n                \n                .excel-table .row-number {\n                    position: sticky;\n                    left: 0;\n                    z-index: 1;\n                    background-color: #f2f2f2;\n                }\n            `;\n            document.head.appendChild(style);\n        }\n    }\n}\n","import fetch, { Headers } from 'node-fetch';\nimport { QdrantClient } from '@qdrant/js-client-rest';\nimport crypto from 'crypto'; // 导入crypto模块\n// 不再使用 dotenv/config，在服务器启动时已加载环境变量\n\n// 如果在Node.js环境中，需要全局提供Headers和fetch\nif (typeof global !== 'undefined') {\n    if (!global.Headers) {\n        global.Headers = Headers;\n    }\n    if (!global.fetch) {\n        global.fetch = fetch;\n    }\n}\n\n// 单例实例\nlet instance = null;\n\nexport class OllamaEmbeddingService {\n    constructor(\n        ollamaUrl = process.env.OLLAMA_URL || 'http://172.16.1.65:11434',\n        modelName = 'bge-m3:latest',\n        qdrantUrl = process.env.QDRANT_URL || 'http://172.16.0.78:6333',\n        collectionName = 'translation_embeddings',\n        vectorSize = 1024\n    ) {\n        // 如果已经有实例，直接返回\n        if (instance) {\n            console.log('已经存在 OllamaEmbeddingService 实例，返回现有实例');\n            return instance;\n        }\n        \n        console.log('初始化 OllamaEmbeddingService');\n        this.ollamaUrl = ollamaUrl;\n        this.modelName = modelName;\n        this.collectionName = collectionName;\n        this.vectorSize = vectorSize;\n        this.qdrantUrl = qdrantUrl;\n        \n        // 初始化Qdrant客户端\n        this.qdrantClient = new QdrantClient({\n            url: this.qdrantUrl,\n            checkCompatibility: false,  // 禁用版本兼容性检查，避免连接问题\n            timeout: 15000,  // 增加超时时间到15秒\n            retries: 3       // 添加重试次数\n        });\n        \n        console.log(`实际使用的Qdrant URL: ${qdrantUrl}`);\n        console.log(`实际使用的Ollama URL: ${ollamaUrl}`);\n        \n        // 保存实例\n        instance = this;\n    }\n\n    /**\n     * 初始化向量数据库集合\n     */\n    async initializeCollection() {\n        let retries = 2; // 重试次数\n        let delay = 1000; // 初始延迟时间（毫秒）\n        \n        while (retries >= 0) {\n            try {\n                console.log(`尝试初始化Qdrant集合 (剩余重试: ${retries})...`);\n                \n                // 检查集合是否存在\n                const collections = await this.qdrantClient.getCollections();\n                const collectionExists = collections.collections.some(c => c.name === this.collectionName);\n\n                if (!collectionExists) {\n                    // 创建新集合\n                    console.log(`创建新集合: ${this.collectionName}, 向量维度: ${this.vectorSize}`);\n                    await this.qdrantClient.createCollection(this.collectionName, {\n                        vectors: {\n                            vector_cn: {\n                                size: this.vectorSize,\n                                distance: 'Cosine'\n                            },\n                            vector_en: {\n                                size: this.vectorSize,\n                                distance: 'Cosine'\n                            }\n                        }\n                    });\n                    console.log(`成功创建集合: ${this.collectionName}`);\n                } else {\n                    console.log(`集合已存在: ${this.collectionName}`);\n                    \n                    // 检查集合的向量维度是否匹配\n                    try {\n                        const collectionInfo = await this.qdrantClient.getCollection(this.collectionName);\n                        console.log('集合配置:', JSON.stringify(collectionInfo.config, null, 2));\n                        \n                        // 检查是否需要重新创建集合（向量维度变化或需要命名向量）\n                        const needsRecreation = this.checkIfCollectionNeedsRecreation(collectionInfo);\n                        \n                        if (needsRecreation) {\n                            console.log('集合配置不匹配，需要重新创建...');\n                            // 删除旧集合\n                            await this.qdrantClient.deleteCollection(this.collectionName);\n                            console.log(`已删除旧集合: ${this.collectionName}`);\n                            \n                            // 创建新集合\n                            await this.qdrantClient.createCollection(this.collectionName, {\n                                vectors: {\n                                    vector_cn: {\n                                        size: this.vectorSize,\n                                        distance: 'Cosine'\n                                    },\n                                    vector_en: {\n                                        size: this.vectorSize,\n                                        distance: 'Cosine'\n                                    }\n                                }\n                            });\n                            console.log(`成功重新创建集合: ${this.collectionName}`);\n                        }\n                    } catch (infoError) {\n                        console.error('获取集合信息失败:', infoError.message);\n                    }\n                }\n                return true;\n            } catch (error) {\n                console.error(`初始化向量数据库集合失败 (剩余重试: ${retries}):`, error.message);\n                \n                // 提供更详细的错误信息\n                if (error.message.includes('ECONNREFUSED')) {\n                    console.error(`无法连接到Qdrant服务，请确保Qdrant服务正在运行于: ${this.qdrantUrl}`);\n                } else if (error.message.includes('fetch failed')) {\n                    console.error(`Qdrant服务请求失败，可能是网络问题或服务未启动: ${this.qdrantUrl}`);\n                }\n                \n                if (retries > 0) {\n                    console.log(`将在 ${delay/1000} 秒后重试初始化集合...`);\n                    await new Promise(resolve => setTimeout(resolve, delay));\n                    delay *= 2; // 指数退避策略\n                    retries--;\n                } else {\n                    console.error('初始化向量数据库集合失败，已达到最大重试次数');\n                    return false;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 检查集合是否需要重新创建\n     * @param {Object} collectionInfo - 集合信息\n     * @returns {boolean} - 是否需要重新创建\n     */\n    checkIfCollectionNeedsRecreation(collectionInfo) {\n        // 检查是否使用命名向量\n        const hasNamedVectors = collectionInfo.config?.params?.vectors?.vector_cn && \n                               collectionInfo.config?.params?.vectors?.vector_en;\n        \n        if (!hasNamedVectors) {\n            console.log('集合不使用命名向量，需要重新创建');\n            return true;\n        }\n        \n        // 检查向量维度\n        const cnVectorSize = collectionInfo.config?.params?.vectors?.vector_cn?.size;\n        const enVectorSize = collectionInfo.config?.params?.vectors?.vector_en?.size;\n        \n        if (cnVectorSize !== this.vectorSize || enVectorSize !== this.vectorSize) {\n            console.log(`向量维度不匹配: 当前配置=${this.vectorSize}, 集合中文向量=${cnVectorSize}, 英文向量=${enVectorSize}`);\n            return true;\n        }\n        \n        return false;\n    }\n\n    /**\n     * 使用Ollama生成文本嵌入向量\n     */\n    async generateEmbedding(text) {\n        try {\n            if (!text || typeof text !== 'string' || text.trim() === '') {\n                console.error('无效的文本输入:', text);\n                throw new Error('无效的文本输入');\n            }\n            \n            const requestBody = {\n                model: this.modelName,\n                prompt: text.trim()\n            };\n            \n            console.log(`向Ollama发送嵌入请求 - 模型: ${this.modelName}, 文本长度: ${text.length}`);\n            console.log('嵌入请求体:', JSON.stringify(requestBody, null, 2));\n            \n            const response = await fetch(`${this.ollamaUrl}/api/embeddings`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json; charset=UTF-8'\n                },\n                body: JSON.stringify(requestBody)\n            });\n            \n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(`嵌入API错误 - 状态码: ${response.status}, 错误信息:`, errorText);\n                throw new Error(`嵌入API错误: ${response.status}`);\n            }\n            \n            const responseText = await response.text();\n            //console.log('嵌入API原始响应:', responseText);\n            \n            const data = JSON.parse(responseText);\n            console.log(`嵌入响应数据 - 向量长度: ${data.embedding ? data.embedding.length : 'undefined'}`);\n            \n            if (!data.embedding || !Array.isArray(data.embedding)) {\n                console.error('嵌入响应格式错误:', data);\n                throw new Error('嵌入响应格式错误');\n            }\n            \n            return { embedding: data.embedding };\n        } catch (error) {\n            console.error('生成嵌入向量失败:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * 存储嵌入向量到Qdrant\n     */\n    async storeEmbedding(text, metadata) {\n        try {\n            const embedding = await this.generateEmbedding(text);\n            \n            if (embedding === null) {\n                console.error('生成嵌入向量失败，无法存储');\n                return { success: false, id: null };\n            }\n            \n            // 使用UUID作为ID\n            const uuid = crypto.randomUUID();\n            \n            await this.qdrantClient.upsert(this.collectionName, {\n                wait: true,\n                points: [\n                    {\n                        id: uuid,\n                        vector: embedding.embedding,\n                        payload: {\n                            text,\n                            ...metadata\n                        }\n                    }\n                ]\n            });\n            \n            console.log(`成功存储嵌入向量: ${uuid}, 类型: ${metadata.type || '未指定'}`);\n            return { success: true, id: uuid };\n        } catch (error) {\n            console.error('存储嵌入向量失败:', error);\n            // 不抛出错误，而是返回失败状态\n            return { success: false, id: null };\n        }\n    }\n\n    /**\n     * 存储完整翻译条目的向量（包含中文和英文向量）\n     * @param {Object} entry - 完整的翻译条目，包含所有语言\n     * @returns {Object} - 包含操作结果和向量ID的对象\n     */\n    async storeEntryVectors(entry) {\n        try {\n            // 验证输入\n            if (!entry || !entry.Chinese) {\n                console.error('无效的条目:', entry);\n                throw new Error('条目必须包含中文字段');\n            }\n            \n            // 生成唯一ID\n            const id = crypto.randomUUID();\n            \n            // 生成中文嵌入\n            let chineseEmbedding = null;\n            try {\n                chineseEmbedding = await this.generateEmbedding(entry.Chinese);\n            } catch (cnError) {\n                console.error('生成中文嵌入失败:', cnError.message);\n                throw new Error(`生成中文嵌入失败: ${cnError.message}`);\n            }\n            \n            // 生成英文嵌入（如果有英文字段）\n            let englishEmbedding = null;\n            if (entry.English && entry.English.trim() !== '') {\n                try {\n                    englishEmbedding = await this.generateEmbedding(entry.English);\n                } catch (enError) {\n                    console.error('生成英文嵌入失败:', enError.message);\n                    // 英文嵌入失败不阻止整个过程，只记录错误\n                }\n            }\n            \n            // 构建向量对象\n            const vectors = {\n                vector_cn: chineseEmbedding.embedding\n            };\n            \n            // 如果有英文嵌入，添加到向量对象\n            if (englishEmbedding) {\n                vectors.vector_en = englishEmbedding.embedding;\n            }\n            \n            // 构建payload对象\n            const payload = {\n                Chinese: entry.Chinese,\n                English: entry.English || '',\n                Japanese: entry.Japanese || '',\n                Korean: entry.Korean || '',\n                Spanish: entry.Spanish || '',\n                French: entry.French || '',\n                German: entry.German || '',\n                Russian: entry.Russian || '',\n                Thai: entry.Thai || '',\n                Italian: entry.Italian || '',\n                Indonesian: entry.Indonesian || '',\n                Portuguese: entry.Portuguese || ''\n            };\n            \n            // 存储向量\n            await this.qdrantClient.upsert(this.collectionName, {\n                points: [\n                    {\n                        id: id,\n                        vectors: vectors,\n                        payload: payload\n                    }\n                ]\n            });\n            \n            console.log(`成功存储向量 ID: ${id}`);\n            return {\n                success: true,\n                id: id\n            };\n        } catch (error) {\n            console.error('存储条目向量失败:', error.message);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n\n    /**\n     * 更新翻译条目的向量\n     * @param {Object} entry - 条目对象\n     * @param {string} id - 向量ID\n     * @returns {Promise<Object>} - 更新结果\n     */\n    async updateEntryVectors(entry, id) {\n        try {\n            if (!entry || !id) {\n                console.error('更新向量失败: 缺少条目或ID');\n                return { success: false, error: '缺少条目或ID' };\n            }\n            \n            console.log(`更新向量 ID: ${id}, 条目: \"${entry.Chinese || '未知'}\"`);\n            \n            // 生成中文向量\n            let vector_cn = null;\n            if (entry.Chinese && entry.Chinese.trim() !== '') {\n                try {\n                    const cnEmbedding = await this.generateEmbedding(entry.Chinese);\n                    vector_cn = cnEmbedding.embedding;\n                } catch (cnError) {\n                    console.error('生成中文向量失败:', cnError.message);\n                }\n            }\n            \n            // 生成英文向量\n            let vector_en = null;\n            if (entry.English && entry.English.trim() !== '') {\n                try {\n                    const enEmbedding = await this.generateEmbedding(entry.English);\n                    vector_en = enEmbedding.embedding;\n                } catch (enError) {\n                    console.error('生成英文向量失败:', enError.message);\n                }\n            }\n            \n            // 如果没有成功生成任何向量，则返回失败\n            if (!vector_cn && !vector_en) {\n                console.error('无法为条目生成向量嵌入:', entry.Chinese || entry.English || '未知条目');\n                return { success: false, error: '无法生成向量嵌入' };\n            }\n            \n            // 准备payload\n            const payload = {\n                Chinese: entry.Chinese || '',\n                English: entry.English || '',\n                Japanese: entry.Japanese || '',\n                Korean: entry.Korean || '',\n                Spanish: entry.Spanish || '',\n                French: entry.French || '',\n                German: entry.German || '',\n                Russian: entry.Russian || '',\n                Thai: entry.Thai || '',\n                Italian: entry.Italian || '',\n                Indonesian: entry.Indonesian || '',\n                Portuguese: entry.Portuguese || ''\n            };\n            \n            // 准备向量对象\n            const vectors = {};\n            if (vector_cn) {\n                vectors.vector_cn = vector_cn;\n            }\n            if (vector_en) {\n                vectors.vector_en = vector_en;\n            }\n            \n            // 创建点对象\n            const point = {\n                id: id,\n                vectors: vectors,\n                payload: payload\n            };\n\n            // 更新Qdrant中的向量\n            await this.qdrantClient.upsert(this.collectionName, {\n                wait: true,\n                points: [point]\n            });\n            \n            console.log(`成功更新向量 ID: ${id}`);\n            return { success: true, id: id };\n        } catch (error) {\n            console.error('更新向量失败:', error.message);\n            return { success: false, error: error.message };\n        }\n    }\n\n    /**\n     * 测试嵌入服务功能\n     * @returns {Promise<Object>} 测试结果\n     */\n    async testService() {\n        try {\n            console.log('开始测试嵌入服务...');\n            \n            // 检查Qdrant连接\n            await this.checkQdrantConnection();\n            \n            // 测试生成嵌入向量\n            const testText = \"这是一个测试文本，用于验证嵌入服务是否正常工作。\";\n            console.log(`测试文本: \"${testText}\"`);\n            \n            // 生成嵌入向量\n            const embedding = await this.generateEmbedding(testText);\n            console.log(`成功生成嵌入向量，维度: ${embedding.embedding.length}`);\n            \n            // 获取集合列表\n            const collections = await this.qdrantClient.getCollections();\n            console.log('Qdrant集合列表:', JSON.stringify(collections, null, 2));\n            \n            // 检查集合是否存在\n            const collectionExists = collections.collections.some(c => c.name === this.collectionName);\n            console.log(`集合 ${this.collectionName} ${collectionExists ? '存在' : '不存在'}`);\n            \n            console.log('嵌入服务测试成功');\n            \n            return {\n                success: true,\n                embeddingDimension: embedding.embedding.length,\n                collections: collections.collections.map(c => c.name)\n            };\n        } catch (error) {\n            console.error('嵌入服务测试失败:', error);\n            return {\n                success: false,\n                error: error.message || '未知错误'\n            };\n        }\n    }\n\n    /**\n     * 检查Qdrant连接是否可用\n     * @returns {Promise<boolean>} 连接是否可用\n     */\n    async checkQdrantConnection() {\n        let retries = 2; // 重试次数\n        let delay = 1000; // 初始延迟时间（毫秒）\n        \n        while (retries >= 0) {\n            try {\n                console.log(`检查Qdrant连接... (剩余重试次数: ${retries})`);\n                // 尝试获取集合列表来验证连接\n                const collections = await this.qdrantClient.getCollections();\n                console.log('Qdrant连接成功，可用集合:', collections.collections?.map(c => c.name).join(', ') || '无');\n                return true;\n            } catch (error) {\n                console.error(`Qdrant连接尝试失败 (剩余重试: ${retries}):`, error.message);\n                \n                // 提供更详细的错误信息\n                if (error.message.includes('ECONNREFUSED')) {\n                    console.error(`无法连接到Qdrant服务，请确保Qdrant服务正在运行于: ${this.qdrantUrl}`);\n                } else if (error.message.includes('fetch failed')) {\n                    console.error(`Qdrant服务请求失败，可能是网络问题或服务未启动: ${this.qdrantUrl}`);\n                }\n                \n                if (retries > 0) {\n                    console.log(`将在 ${delay/1000} 秒后重试...`);\n                    await new Promise(resolve => setTimeout(resolve, delay));\n                    delay *= 2; // 指数退避策略\n                    retries--;\n                } else {\n                    console.error('Qdrant连接失败，已达到最大重试次数');\n                    return false;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 搜索相似文本\n     * @param {string} text - 要搜索的文本\n     * @param {string} language - 文本语言，用于确定使用哪个向量字段\n     * @param {number} limit - 返回结果数量限制\n     * @returns {Promise<Array>} - 相似条目数组\n     */\n    async searchSimilar(text, language = 'chinese', limit = 5) {\n        try {\n            console.log(`开始搜索相似条目 - 文本: \"${text}\", 语言: ${language}, 限制: ${limit}`);\n            \n            // 生成文本嵌入\n            const embedding = await this.generateEmbedding(text);\n            \n            if (!embedding || !embedding.embedding) {\n                console.error('生成嵌入失败，无法执行搜索');\n                return [];\n            }\n            \n            console.log(`成功生成嵌入向量，维度: ${embedding.embedding.length}`);\n            \n            // 确定使用哪个向量字段\n            // 标准化语言参数，忽略大小写，只关注是否是英语\n            const isEnglish = typeof language === 'string' && language.toLowerCase().includes('english');\n            const vectorName = isEnglish ? 'vector_en' : 'vector_cn';\n            \n            console.log(`使用向量字段: ${vectorName}, 语言参数: ${language}, 是否英语: ${isEnglish}`);\n            \n            let searchResults = [];\n            \n            try {\n                // 执行向量搜索\n                searchResults = await this.qdrantClient.search(this.collectionName, {\n                    vector: {name:vectorName, vector:embedding.embedding},\n                    limit: 1,\n                    with_payload: true\n                });\n                \n                console.log(`搜索完成，找到 ${searchResults?.length || 0} 个结果`);\n            } catch (qdrantError) {\n                console.error('Qdrant搜索失败:', qdrantError.message);\n                \n                // 提供更详细的错误信息\n                if (qdrantError.message.includes('ECONNREFUSED')) {\n                    console.error(`无法连接到Qdrant服务，请确保Qdrant服务正在运行于: ${this.qdrantUrl}`);\n                } else if (qdrantError.message.includes('fetch failed')) {\n                    console.error(`Qdrant服务请求失败，可能是网络问题或服务未启动: ${this.qdrantUrl}`);\n                } else if (qdrantError.message.includes('collection not found')) {\n                    console.error(`集合 \"${this.collectionName}\" 不存在，请先创建集合`);\n                    // 尝试创建集合\n                    try {\n                        console.log(`尝试创建集合 \"${this.collectionName}\"...`);\n                        await this.initializeCollection();\n                    } catch (initError) {\n                        console.error('创建集合失败:', initError.message);\n                    }\n                }\n                \n                if (qdrantError.data && qdrantError.data.status && qdrantError.data.status.error) {\n                    console.error('Qdrant搜索失败:', qdrantError.data.status.error);\n                }\n                return [];\n            }\n            \n            if (!searchResults || searchResults.length === 0) {\n                console.log('未找到相似结果');\n                return [];\n            }\n            \n            // 处理搜索结果\n            const results = searchResults.map(result => {\n                const payload = result.payload || {};\n                \n                // 计算相似度\n                let similarity = result.score;\n                \n                // 返回处理后的结果\n                return {\n                    id: result.id,\n                    Chinese: payload.Chinese || '',\n                    English: payload.English || '',\n                    Japanese: payload.Japanese || '',\n                    Korean: payload.Korean || '',\n                    Spanish: payload.Spanish || '',\n                    French: payload.French || '',\n                    German: payload.German || '',\n                    Russian: payload.Russian || '',\n                    Thai: payload.Thai || '',\n                    Italian: payload.Italian || '',\n                    Indonesian: payload.Indonesian || '',\n                    Portuguese: payload.Portuguese || '',\n                    similarity: similarity\n                };\n            });\n            \n            console.log(`返回 ${results.length} 个处理后的结果`);\n            return results;\n        } catch (error) {\n            console.error('搜索相似条目失败:', error.message);\n            return [];\n        }\n    }\n    \n    /**\n     * 计算两个向量之间的余弦相似度\n     * @param {Array} vec1 - 第一个向量\n     * @param {Array} vec2 - 第二个向量\n     * @returns {number} - 余弦相似度，范围在-1到1之间\n     */\n    calculateCosineSimilarity(vec1, vec2) {\n        if (!vec1 || !vec2 || vec1.length !== vec2.length) {\n            return 0;\n        }\n        \n        let dotProduct = 0;\n        let norm1 = 0;\n        let norm2 = 0;\n        \n        for (let i = 0; i < vec1.length; i++) {\n            dotProduct += vec1[i] * vec2[i];\n            norm1 += vec1[i] * vec1[i];\n            norm2 += vec2[i] * vec2[i];\n        }\n        \n        norm1 = Math.sqrt(norm1);\n        norm2 = Math.sqrt(norm2);\n        \n        if (norm1 === 0 || norm2 === 0) {\n            return 0;\n        }\n        \n        return dotProduct / (norm1 * norm2);\n    }\n\n    /**\n     * 删除嵌入向量\n     */\n    async deleteEmbedding(id) {\n        try {\n            await this.qdrantClient.delete(this.collectionName, {\n                wait: true,\n                points: [id]\n            });\n            \n            return true;\n        } catch (error) {\n            console.error('删除嵌入向量失败:', error);\n            // 不抛出错误，而是返回失败状态\n            return false;\n        }\n    }\n\n    /**\n     * 将文本添加到向量存储\n     * @param {string} text - 要添加的文本\n     * @param {string} language - 文本语言，'chinese'或'english'\n     * @param {Object} metadata - 元数据\n     * @returns {Promise<string>} - 添加的记录ID\n     */\n    async addToVectorStore(text, language = 'chinese', metadata = {}) {\n        try {\n            if (!text || typeof text !== 'string' || text.trim() === '') {\n                console.error('添加到向量存储的文本为空');\n                throw new Error('文本为空');\n            }\n            \n            console.log(`添加文本到向量存储: \"${text.substring(0, 30)}${text.length > 30 ? '...' : ''}\", 语言: ${language}`);\n            \n            // 生成文本的嵌入向量\n            const embedding = await this.generateEmbedding(text);\n            if (!embedding) {\n                throw new Error('无法生成嵌入向量');\n            }\n            \n            // 生成唯一ID\n            const uuid = crypto.randomUUID();\n            \n            // 将文本和向量添加到Qdrant\n            await this.qdrantClient.upsert(this.collectionName, {\n                points: [\n                    {\n                        id: uuid,\n                        vector: embedding.embedding,\n                        payload: {\n                            text,\n                            ...metadata\n                        }\n                    }\n                ]\n            });\n            \n            console.log(`成功添加文本到向量存储，ID: ${uuid}`);\n            return uuid;\n        } catch (error) {\n            console.error('添加文本到向量存储失败:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * 删除指定ID的向量\n     * @param {string} id - 向量ID\n     * @returns {Promise<boolean>} - 删除是否成功\n     */\n    async deleteVector(id) {\n        try {\n            if (!id) {\n                console.error('删除向量失败: ID为空');\n                return false;\n            }\n\n            console.log(`删除向量: ${id}`);\n            \n            // 检查Qdrant连接状态\n            const isConnected = await this.checkQdrantConnection();\n            if (!isConnected) {\n                console.error('Qdrant服务不可用，无法删除向量');\n                return false;\n            }\n            \n            // 删除向量\n            await this.qdrantClient.delete(this.collectionName, {\n                points: [id],\n            });\n            \n            console.log(`成功删除向量: ${id}`);\n            return true;\n        } catch (error) {\n            console.error(`删除向量失败: ${error.message}`);\n            return false;\n        }\n    }\n}\n","import { OllamaEmbeddingService } from './embedding.js';\n\n// 创建单例实例\nconsole.log('创建 OllamaEmbeddingService 单例实例');\nexport const embeddingService = new OllamaEmbeddingService();\nconsole.log('OllamaEmbeddingService 单例实例创建完成');\n","/**\n * 语言工具类\n */\nexport class LanguageUtils {\n    /**\n     * 获取源语言列表\n     * @returns {Array} - 源语言列表\n     */\n    static getSourceLanguages() {\n        return ['Chinese', 'English'];\n    }\n\n    /**\n     * 获取源语言配置\n     * @returns {Object} - 源语言配置对象\n     */\n    static getSourceLanguageConfig() {\n        return {\n            'Chinese': 'Chinese',\n            'English': 'English'\n        };\n    }\n\n    /**\n     * 获取语言映射\n     * @returns {Array} - 语言映射数组\n     */\n    static getLanguageMappings() {\n        return [\n            { columnHeader: '英语', targetLang: 'English' },\n            { columnHeader: '日语', targetLang: 'Japanese' },\n            { columnHeader: '韩语', targetLang: 'Korean' },\n            { columnHeader: '西班牙语', targetLang: 'Spanish' },\n            { columnHeader: '法语', targetLang: 'French' },\n            { columnHeader: '德语', targetLang: 'German' },\n            { columnHeader: '俄语', targetLang: 'Russian' },\n            { columnHeader: '泰语', targetLang: 'Thai' },\n            { columnHeader: '意大利语', targetLang: 'Italian' },\n            { columnHeader: '印尼语', targetLang: 'Indonesian' },\n            { columnHeader: '葡萄牙语', targetLang: 'Portuguese' },\n            { columnHeader: '越南语', targetLang: 'Vietnamese' },\n            { columnHeader: '繁体中文', targetLang: 'TraditionalChinese' }\n        ];\n    }\n\n    /**\n     * 获取语言显示名称\n     * @param {string} langCode - 语言代码\n     * @returns {string} - 语言显示名称\n     */\n    static getLanguageDisplayName(langCode) {\n        // 简单返回语言代码，因为我们不再使用详细的映射\n        return langCode;\n    }\n\n    /**\n     * 获取API语言代码\n     * @param {string} langCode - 语言代码\n     * @returns {string} - API语言代码\n     */\n    static getApiLanguageCode(langCode) {\n        // 将简写语言代码转换为API需要的全拼语言名称\n        if (!langCode) return '';\n        \n        const languageCodeMap = {\n            'zh': 'Chinese',\n            'en': 'English',\n            'ja': 'Japanese',\n            'ko': 'Korean',\n            'es': 'Spanish',\n            'fr': 'French',\n            'de': 'German',\n            'ru': 'Russian',\n            'th': 'Thai',\n            'it': 'Italian',\n            'id': 'Indonesian',\n            'pt': 'Portuguese',\n            'zh-TW': 'TraditionalChinese',\n            'zh-HK': 'TraditionalChinese'\n        };\n        \n        return languageCodeMap[langCode] || langCode;\n    }\n\n    /**\n     * 根据列标题查找语言\n     * @param {string} columnHeader - 列标题\n     * @returns {string|null} - 语言代码或null\n     */\n    static findLanguageByColumnHeader(columnHeader) {\n        if (!columnHeader) return null;\n        \n        const mappings = this.getLanguageMappings();\n        for (const mapping of mappings) {\n            if (mapping.columnHeader === columnHeader) {\n                return mapping.targetLang;\n            }\n        }\n        \n        // 特殊处理源语言\n        if (columnHeader === '简体中文' || columnHeader === '中文') {\n            return 'Chinese';\n        }\n        \n        if (columnHeader === '繁體中文' || columnHeader === '繁体中文') {\n            return 'TraditionalChinese';\n        }\n        \n        return null;\n    }\n    \n    /**\n     * 获取语言的中文名称\n     * @param {string} langCode - 语言代码\n     * @returns {string} - 语言的中文名称\n     */\n    static getLanguageName(langCode) {\n        if (!langCode) return '';\n        \n        const languageNameMap = {\n            'Chinese': '中文',\n            'English': '英语',\n            'Japanese': '日语',\n            'Korean': '韩语',\n            'Spanish': '西班牙语',\n            'French': '法语',\n            'German': '德语',\n            'Russian': '俄语',\n            'Thai': '泰语',\n            'Italian': '意大利语',\n            'Indonesian': '印尼语',\n            'Portuguese': '葡萄牙语',\n            'Vietnamese': '越南语',\n            'TraditionalChinese': '繁体中文'\n        };\n        \n        return languageNameMap[langCode] || langCode;\n    }\n}\n","/**\n * 翻译服务类\n */\nimport { embeddingService } from './embedding-instance.js';\nimport fetch from 'node-fetch';\nimport { LanguageUtils } from '../utils/LanguageUtils.js';\n\nexport class TranslationService {\n    /**\n     * 创建翻译服务实例\n     * @param {string} apiKey - API密钥\n     * @param {Function} logCallback - 日志回调函数\n     */\n    constructor(apiKey, logCallback) {\n        this.apiEndpoint = 'https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions';\n        // 优先使用传入的API密钥，如果没有则使用环境变量中的密钥\n        this.apiKey = apiKey || process.env.ALI_API_KEY || '';\n        this.logCallback = logCallback || console.log;\n        this.shouldStopTranslation = false;\n        \n        if (this.apiKey) {\n            console.log('已成功加载API密钥');\n        }\n    }\n\n    /**\n     * 停止翻译\n     */\n    stopTranslation() {\n        this.shouldStopTranslation = true;\n    }\n\n    /**\n     * 重置停止标志\n     */\n    resetStopFlag() {\n        this.shouldStopTranslation = false;\n    }\n\n    /**\n     * 从知识库中获取翻译记忆\n     * @param {string} text - 源文本\n     * @param {string} sourceLanguage - 源语言\n     * @param {string} targetLanguage - 目标语言\n     * @returns {Promise<Array>} - 翻译记忆列表\n     */\n    async getTranslationMemory(text, sourceLanguage, targetLanguage) {\n        try {\n            if (!text || text.trim() === '') {\n                return [];\n            }\n\n            // 将语言代码转换为标准格式\n            const standardSourceLang = LanguageUtils.getApiLanguageCode(sourceLanguage);\n            const standardTargetLang = LanguageUtils.getApiLanguageCode(targetLanguage);\n\n            // 确定向量搜索的语言类型\n            const vectorLanguage = standardSourceLang === 'Chinese' ? 'chinese' : 'english';\n            \n            try {\n                // 搜索相似的翻译条目\n                const similarEntries = await embeddingService.searchSimilar(text, vectorLanguage, 3);\n                \n                // 如果没有找到相似条目，返回空数组\n                if (!similarEntries || similarEntries.length === 0) {\n                    console.log('未找到相似的翻译记忆');\n                    return [];\n                }\n                \n                // 确定源语言和目标语言在数据库中的字段名\n                const sourceField = standardSourceLang;\n                const targetField = standardTargetLang;\n                \n                console.log(`构建翻译记忆 - 源语言字段: ${sourceField}, 目标语言字段: ${targetField}`);\n                \n                // 构建翻译记忆列表\n                const tmList = [];\n                \n                for (const entry of similarEntries) {\n                    // 检查条目是否有效\n                    if (!entry) {\n                        console.log('跳过翻译记忆: 条目为空');\n                        continue;\n                    }\n                    \n                    // 输出完整的条目以便调试\n                    console.log('翻译记忆条目:', JSON.stringify(entry));\n                    \n                    // 获取源语言和目标语言的文本\n                    // 由于Qdrant中的字段名是首字母大写的，直接使用标准格式\n                    const sourceText = entry[sourceField] || '';\n                    const targetText = entry[targetField] || '';\n                    \n                    // 只有当源和目标都有值时才添加到翻译记忆\n                    if (sourceText && targetText && sourceText.trim() !== '' && targetText.trim() !== '') {\n                        tmList.push({\n                            source: sourceText,\n                            target: targetText\n                        });\n                        console.log(`添加翻译记忆: ${sourceText} -> ${targetText}`);\n                    } else {\n                        if (!sourceText || sourceText.trim() === '') {\n                            console.log(`跳过翻译记忆: 源语言字段为空`);\n                        }\n                        if (!targetText || targetText.trim() === '') {\n                            console.log(`跳过翻译记忆: 目标语言字段为空, 条目中的字段: ${Object.keys(entry).join(', ')}`);\n                        }\n                    }\n                }\n                \n                console.log(`找到 ${tmList.length} 条翻译记忆`);\n                return tmList;\n            } catch (vectorError) {\n                // 向量搜索失败，记录错误但不中断翻译流程\n                console.error('向量搜索失败，将跳过翻译记忆匹配:', vectorError.message);\n                return [];\n            }\n        } catch (error) {\n            console.error('获取翻译记忆失败:', error);\n            // 出错时返回空数组，允许翻译流程继续\n            return [];\n        }\n    }\n\n    /**\n     * 翻译批次\n     * @param {Object} batch - 翻译批次\n     * @param {string} sourceLanguage - 源语言\n     * @returns {Promise<boolean>} - 是否成功\n     */\n    async translateBatch(batch, sourceLanguage) {\n        try {\n            // 确保batch和batch.tasks存在\n            if (!batch || !batch.tasks || !Array.isArray(batch.tasks) || batch.tasks.length === 0) {\n                console.error('错误: 无效的批量翻译任务', batch);\n                this.logCallback('错误: 无效的批量翻译任务', 'error');\n                return false;\n            }\n            \n            // 获取批次的行号范围\n            const rowIndices = batch.tasks.map(task => task.rowIndex + 3); // +3 因为用户看到的Excel行号从1开始，加上有两行头部\n            const minRow = Math.min(...rowIndices);\n            const maxRow = Math.max(...rowIndices);\n            const rowRange = minRow === maxRow ? `第 ${minRow} 行` : `第 ${minRow} 行到第 ${maxRow} 行`;\n            \n            // 确保sourceLanguage和targetLang正确设置\n            const sourceLang = sourceLanguage || 'zh';\n            \n            // 检查目标语言是否存在\n            if (!batch.tasks[0].targetLang && !batch.tasks[0].targetLanguage && !batch.tasks[0].to) {\n                console.error('错误: 目标语言未定义', batch.tasks[0]);\n                this.logCallback('错误: 目标语言未定义', 'error');\n                return false;\n            }\n            \n            // 获取目标语言，优先使用targetLanguage字段\n            const targetLang = batch.tasks[0].targetLanguage || batch.tasks[0].targetLang || batch.tasks[0].to || 'en';\n            \n            this.logCallback(`开始翻译批次 ${batch.batchId} - ${sourceLang} 到 ${targetLang} - ${rowRange} - ${batch.tasks.length}个任务`, 'info');\n            \n            // 只在调试模式下打印详细任务信息\n            if (process.env.NODE_ENV === 'development') {\n                console.log(`开始翻译批次 - ${batch.tasks.length}个任务:`, batch.tasks);\n            }\n            \n            // 再次尝试从环境变量获取API密钥\n            if (!this.apiKey || (typeof this.apiKey === 'string' && this.apiKey.trim() === '')) {\n                if (process.env.ALI_API_KEY) {\n                    this.apiKey = process.env.ALI_API_KEY;\n                    console.log('从环境变量获取到API密钥');\n                } else {\n                    const error = new Error('错误：API密钥未设置');\n                    console.error(error);\n                    this.logCallback(error.message, 'error');\n                    throw error;\n                }\n            }\n            \n            // 过滤掉空文本任务或非字符串任务\n            const validTasks = batch.tasks.filter(task => {\n                try {\n                    // 如果任务文本不是字符串，尝试转换\n                    if (typeof task.text !== 'string') {\n                        console.error(`警告: 任务文本不是字符串，类型为 ${typeof task.text}`);\n                        if (task.text === null || task.text === undefined) {\n                            return false; // 跳过 null 或 undefined\n                        }\n                        // 尝试转换为字符串\n                        task.text = String(task.text);\n                    }\n                    return task.text.trim() !== '';\n                } catch (error) {\n                    console.error(`过滤任务时出错:`, error, task);\n                    return false; // 如果出错，跳过该任务\n                }\n            });\n            if (validTasks.length === 0) {\n                this.logCallback('批次中没有有效的翻译任务', 'warning');\n                return false;\n            }\n            \n            if (this.shouldStopTranslation) {\n                console.log('翻译被用户停止');\n                this.logCallback('翻译被用户停止', 'warning');\n                return false;\n            }\n\n            try {\n                // 检查是否有有效任务\n                if (validTasks.length === 0) {\n                    this.logCallback('没有有效的翻译任务', 'warning');\n                    return false;\n                }\n                \n                // 检查目标语言是否存在\n                if (!validTasks[0].targetLanguage && !validTasks[0].targetLang && !validTasks[0].to) {\n                    console.error('错误: 目标语言未定义', validTasks[0]);\n                    this.logCallback('错误: 目标语言未定义', 'error');\n                    return false;\n                }\n                \n                console.log(`翻译批次 - 目标语言: ${validTasks[0].targetLanguage || validTasks[0].targetLang || validTasks[0].to}, 共${validTasks.length}个任务`);\n                \n                // 获取目标语言，优先使用targetLanguage字段\n                const targetLang = validTasks[0].targetLanguage || validTasks[0].targetLang || validTasks[0].to;\n                \n                console.log(`翻译批次 - 目标语言: ${targetLang}, 共${validTasks.length}个任务`);\n                \n                // 如果批次中只有一个任务，使用单个翻译方法\n                if (validTasks.length === 1) {\n                    const task = validTasks[0];\n                    const success = await this.translateSingle(task, sourceLanguage);\n                    batch.success = success;\n                    return success;\n                }\n                \n                // 使用JSON格式组织翻译请求和处理结果\n                // 创建带有ID的源文本数组\n                const sourceTexts = validTasks.map((t, idx) => ({\n                    id: idx,\n                    text: t.text\n                }));\n                \n                const requestBody = {\n                    model: \"deepseek-v3\",\n                    messages: [\n                        {\n                            role: \"system\",\n                            content: `你是一个专业的翻译助手。请将以下${LanguageUtils.getLanguageName(sourceLang)}文本翻译成${LanguageUtils.getLanguageName(targetLang)}。\n\n我将提供一个JSON格式的数组，其中包含多个对象，每个对象有id和text字段。请将每个对象的text字段翻译成${LanguageUtils.getLanguageName(targetLang)}，并返回一个新的JSON格式数组，包含原始id和翻译后的文本。\n\n返回格式应为: [{\"id\": 0, \"translation\": \"翻译结果1\"}, {\"id\": 1, \"translation\": \"翻译结果2\"}, ...]\n\n只返回翻译结果的JSON数组，不要添加任何解释或额外内容。重要：不要翻译特殊标记<color=#xxxxxx>,</color>,//n 等，这些是格式标记或特殊字符，应原样保留。`\n                        },\n                        {\n                            role: \"user\",\n                            content: JSON.stringify(sourceTexts)\n                        }\n                    ],\n                    temperature: 0.3,\n                    max_tokens: 8000 // 增加最大token数限制，因为我们现在一次翻译多条\n                };\n                \n                // 打印请求体\n                console.log('发送翻译请求体:', JSON.stringify(requestBody, null, 2));\n                \n                const response = await fetch(this.apiEndpoint, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${typeof this.apiKey === 'string' ? this.apiKey.trim() : this.apiKey}`,\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(requestBody)\n                });\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    console.error(`翻译API错误 - 状态码: ${response.status}, 错误信息:`, errorText);\n                    this.logCallback(`翻译API错误: ${response.status} - ${errorText}`, 'error');\n                    throw new Error(`翻译API错误: ${response.status}`);\n                }\n\n                const responseText = await response.text();\n                \n                // 打印API响应\n                console.log('API原始响应:', responseText);\n                \n                const data = JSON.parse(responseText);\n                \n                // 打印解析后的数据\n                console.log('解析后的响应数据:', JSON.stringify(data, null, 2));\n                \n                if (!data.choices?.[0]?.message?.content) {\n                    console.error('翻译返回数据格式错误:', data);\n                    this.logCallback('翻译返回数据格式错误', 'error');\n                    throw new Error('翻译返回数据格式错误');\n                }\n\n                // 获取翻译结果并分配给每个任务\n                const translatedContent = data.choices[0].message.content;\n                console.log('原始翻译结果:', translatedContent);\n                \n                let translatedResults = [];\n                try {\n                    // 尝试提取JSON部分\n                    const jsonMatch = translatedContent.match(/\\[\\s*\\{.*\\}\\s*\\]/s);\n                    const jsonContent = jsonMatch ? jsonMatch[0] : translatedContent;\n                    \n                    // 解析JSON结果\n                    translatedResults = JSON.parse(jsonContent);\n                    console.log(`成功解析JSON翻译结果，包含 ${translatedResults.length} 个条目`);\n                } catch (parseError) {\n                    console.error('解析JSON翻译结果失败:', parseError);\n                    this.logCallback(`解析翻译结果失败: ${parseError.message}`, 'error');\n                    throw new Error(`解析翻译结果失败: ${parseError.message}`);\n                }\n                \n                // 创建一个映射来存储ID和翻译结果\n                const translationMap = {};\n                for (const result of translatedResults) {\n                    if (result.id !== undefined && result.translation) {\n                        translationMap[result.id] = result.translation;\n                        console.log(`解析翻译结果 - ID ${result.id}: ${result.translation}`);\n                    }\n                }\n                \n                // 将翻译结果分配给每个任务\n                let translatedCount = 0;\n                for (let i = 0; i < validTasks.length; i++) {\n                    if (translationMap[i] !== undefined) {\n                        // 设置translation字段而不是覆盖text字段\n                        validTasks[i].translation = translationMap[i];\n                        console.log(`翻译成功 - 行号: ${validTasks[i].rowIndex + 1}, 译文: ${validTasks[i].translation}`);\n                        translatedCount++;\n                    } else {\n                        console.log(`未找到ID ${i} 的翻译结果`);\n                    }\n                }\n                \n                // 如果有任务没有收到翻译结果，记录警告\n                if (translatedCount < validTasks.length) {\n                    const missingCount = validTasks.length - translatedCount;\n                    this.logCallback(`警告: ${missingCount} 个任务没有收到翻译结果`, 'warning');\n                }\n                \n                // 标记翻译成功\n                batch.success = true;\n                return true;\n                \n            } catch (error) {\n                console.error(`批量翻译失败 - 批次 ${batch.batchId}`, error);\n                \n                // 打印批次信息以帮助调试\n                console.error('批次任务详情:', batch.tasks.map(task => ({\n                    rowIndex: task.rowIndex,\n                    text: task.text,\n                    textType: typeof task.text\n                })));\n                \n                this.logCallback(`翻译失败: ${error.message}`, 'error');\n                \n                // 标记翻译失败\n                batch.success = false;\n                return false;\n            }\n        } catch (error) {\n            console.error('翻译批次失败:', error);\n            this.logCallback(`翻译失败: ${error.message}`, 'error');\n            return false;\n        }\n    }\n\n    /**\n     * 翻译单个任务\n     * @param {Object} task - 翻译任务\n     * @param {string} sourceLanguage - 源语言\n     * @returns {Promise<boolean>} - 是否成功\n     */\n    async translateSingle(task, sourceLanguage) {\n        try {\n            // 确保sourceLanguage和targetLang正确设置\n            const sourceLang = sourceLanguage || (task.from === 'zh' ? 'Chinese' : 'English');\n            \n            // 处理目标语言，优先使用targetLanguage字段\n            const targetLang = task.targetLanguage || task.targetLang || task.to || 'English';\n            \n            console.log(`开始单个翻译 - 源语言: ${sourceLang}, 目标语言: ${targetLang}, 文本: ${task.text}`);\n            \n            // // 获取翻译记忆\n            // const tmList = await this.getTranslationMemory(task.text, sourceLang, targetLang);\n            \n            // 构建DeepSeek翻译API请求体\n            const requestBody = {\n                model: \"deepseek-r1\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: `你是一个专业的翻译助手。请将以下${LanguageUtils.getLanguageName(sourceLang)}文本翻译成${LanguageUtils.getLanguageName(targetLang)}，只返回翻译结果，不要添加任何解释或额外内容。`\n                    },\n                    {\n                        role: \"user\",\n                        content: task.text\n                    }\n                ],\n                temperature: 0.3,\n                max_tokens: 2000\n            };\n            \n            // // 如果有翻译记忆，添加到系统提示中\n            // if (tmList && tmList.length > 0) {\n            //     let tmPrompt = \"参考以下翻译记忆进行翻译:\\n\";\n            //     tmList.forEach((tm, index) => {\n            //         tmPrompt += `参考${index + 1}: ${tm.source} => ${tm.target}\\n`;\n            //     });\n            //     requestBody.messages[0].content = tmPrompt + requestBody.messages[0].content;\n            //     console.log(`使用 ${tmList.length} 条翻译记忆`);\n            // }\n            \n            // 打印请求体\n            console.log('发送单个翻译请求体:', JSON.stringify(requestBody, null, 2));\n            \n            // 发送API请求 - 仍使用通义千问的API端点\n            const response = await fetch(this.apiEndpoint, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${typeof this.apiKey === 'string' ? this.apiKey.trim() : this.apiKey}`,\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify(requestBody)\n            });\n            \n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(`单个翻译API错误 - 状态码: ${response.status}, 错误信息:`, errorText);\n                this.logCallback(`翻译API错误: ${response.status} - ${errorText}`, 'error');\n                throw new Error(`翻译API错误: ${response.status}`);\n            }\n            \n            const responseText = await response.text();\n            console.log('单个翻译API原始响应:', responseText);\n            \n            const data = JSON.parse(responseText);\n            console.log('单个翻译解析后的响应数据:', JSON.stringify(data, null, 2));\n            \n            if (!data.choices?.[0]?.message?.content) {\n                console.error('翻译返回数据格式错误:', data);\n                this.logCallback('翻译返回数据格式错误', 'error');\n                throw new Error('翻译返回数据格式错误');\n            }\n            \n            // 获取翻译结果\n            const translatedContent = data.choices[0].message.content;\n            task.text = typeof translatedContent === 'string' ? \n                translatedContent.trim() : String(translatedContent);\n            \n            console.log(`单个翻译成功 - 行号: ${task.rowIndex + 1}, 译文: ${task.text}`);\n            return true;\n            \n        } catch (error) {\n            console.error('单个翻译失败:', error);\n            this.logCallback(`翻译失败: ${error.message}`, 'error');\n            return false;\n        }\n    }\n}\n\n// 导出翻译服务实例\nexport const translationService = new TranslationService();\n","import { TranslationService, translationService } from './translator.js';\n\n/**\n * 翻译管理器\n */\nexport class TranslationManager {\n    /**\n     * 创建翻译管理器\n     * @param {string} apiKey - API密钥\n     * @param {Function} logCallback - 日志回调函数\n     * @param {Object} progressBar - 进度条对象\n     */\n    constructor(apiKey, logCallback, progressBar) {\n        this.apiKey = apiKey;\n        this.log = logCallback;\n        this.progressBar = progressBar;\n        this.shouldStopTranslation = false;\n    }\n\n    /**\n     * 停止翻译\n     */\n    stopTranslation() {\n        this.shouldStopTranslation = true;\n    }\n\n    /**\n     * 创建批次\n     * @param {Array} items - 项目数组\n     * @param {number} batchSize - 批次大小\n     * @returns {Array} - 批次数组\n     */\n    createBatches(items, batchSize) {\n        const batches = [];\n        for (let i = 0; i < items.length; i += batchSize) {\n            batches.push(items.slice(i, i + batchSize));\n        }\n        return batches;\n    }\n\n    /**\n     * 准备翻译任务\n     * @param {Array} rows - 数据行\n     * @param {number} sourceColumnIndex - 源文本列索引\n     * @param {Array} targetColumns - 目标列配置\n     * @returns {Array} - 翻译任务数组\n     */\n    prepareTranslationTasks(rows, sourceColumnIndex, targetColumns) {\n        const translationTasks = [];\n        \n        // 遍历所有行，收集需要翻译的任务\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            const row = rows[rowIndex];\n            \n            // 检查源文本是否存在\n            const sourceText = row[sourceColumnIndex];\n            if (!sourceText || typeof sourceText !== 'string' || sourceText.trim() === '') {\n                continue; // 跳过空源文本\n            }\n            \n            // 遍历所有目标列\n            for (const targetColumn of targetColumns) {\n                const targetColumnIndex = targetColumn.index;\n                // 使用targetLang属性，如果不存在则使用langCode属性\n                const targetLang = targetColumn.targetLang || targetColumn.langCode;\n                \n                // 检查目标单元格是否已有内容\n                const targetText = row[targetColumnIndex];\n                if (targetText && typeof targetText === 'string' && targetText.trim() !== '') {\n                    continue; // 跳过已有内容的目标单元格\n                }\n                \n                // 创建翻译任务\n                translationTasks.push({\n                    rowIndex,\n                    sourceColumnIndex,\n                    targetColumnIndex,\n                    targetLang,\n                    text: sourceText\n                });\n            }\n        }\n        \n        return translationTasks;\n    }\n    \n    /**\n     * 将任务按目标语言分组并组织成批次\n     * @param {Array} tasks - 翻译任务数组\n     * @param {number} batchSize - 批次大小\n     * @returns {Array} - 批次数组\n     */\n    organizeTasksIntoBatches(tasks, batchSize = 100) {\n        // 按目标语言分组\n        const tasksByLanguage = {};\n        for (const task of tasks) {\n            const lang = task.targetLang;\n            if (!tasksByLanguage[lang]) {\n                tasksByLanguage[lang] = [];\n            }\n            tasksByLanguage[lang].push(task);\n        }\n        \n        // 为每种语言创建批次\n        const batches = [];\n        let batchId = 1;\n        \n        for (const lang in tasksByLanguage) {\n            const langTasks = tasksByLanguage[lang];\n            const langBatches = this.createBatches(langTasks, batchSize);\n            \n            for (const batch of langBatches) {\n                batches.push({\n                    batchId: batchId++,\n                    tasks: batch,\n                    success: false,\n                    completed: 0\n                });\n            }\n        }\n        \n        return batches;\n    }\n    \n    /**\n     * 执行翻译过程\n     * @param {Array} rows - 数据行\n     * @param {number} sourceColumnIndex - 源列索引\n     * @param {string} sourceLang - 源语言\n     * @param {Array} targetColumns - 目标列数组\n     * @param {Function} updateCellCallback - 更新单元格回调函数\n     * @returns {Promise<void>}\n     */\n    async executeTranslation(rows, sourceColumnIndex, sourceLang, targetColumns, updateCellCallback) {\n        try {\n            // 1. 收集所有需要翻译的源文本和目标单元格\n            this.log('正在收集需要翻译的内容...', 'info');\n            const translationTasks = this.prepareTranslationTasks(rows, sourceColumnIndex, targetColumns);\n            \n            if (translationTasks.length === 0) {\n                this.log('没有找到需要翻译的内容', 'warning');\n                return;\n            }\n            \n            this.log(`找到 ${translationTasks.length} 个需要翻译的单元格`, 'info');\n            \n            // 2. 将任务按目标语言分组，然后每组最多20条\n            const batches = this.organizeTasksIntoBatches(translationTasks);\n            \n            // 3. 使用翻译服务实例\n            const translationService = new TranslationService(this.apiKey, this.log);\n            \n            // 4. 开始批量翻译\n            const totalBatches = batches.length;\n            let completedBatches = 0;\n            \n            this.log(`开始处理 ${totalBatches} 个翻译批次`, 'info');\n            \n            for (let i = 0; i < batches.length; i++) {\n                if (this.shouldStopTranslation) {\n                    this.log('翻译已被用户停止', 'warning');\n                    break;\n                }\n                \n                const batch = batches[i];\n                const currentBatchId = i + 1;\n                \n                // 更新进度\n                this.progressBar.updateBatchProgress({\n                    completedBatches,\n                    totalBatches,\n                    currentBatchId,\n                    completedTasksInCurrentBatch: 0,\n                    totalTasksInCurrentBatch: batch.tasks.length\n                });\n                \n                try {\n                    const success = await translationService.translateBatch(batch, sourceLang);\n                    completedBatches++;\n                    \n                    // 更新进度\n                    this.progressBar.updateBatchProgress({\n                        completedBatches,\n                        totalBatches,\n                        currentBatchId: 0, // 当前批次已完成\n                        completedTasksInCurrentBatch: batch.tasks.length,\n                        totalTasksInCurrentBatch: batch.tasks.length\n                    });\n                    \n                    // 只有翻译成功时才更新单元格\n                    if (success) {\n                        // 每个批次完成后更新单元格，但不重新渲染整个表格\n                        let tasksWithResults = 0;\n                        let tasksWithoutResults = 0;\n                        \n                        for (const task of batch.tasks) {\n                            // 只有当任务有翻译结果时才更新单元格\n                            let translation = task.translation;\n                            if (translation && typeof translation === 'string' && translation.trim() !== '') {\n                                // 更新数据模型\n                                rows[task.rowIndex][task.targetColumnIndex] = translation;\n                                \n                                // 直接更新DOM中的单元格内容，而不是重新渲染整个表格\n                                updateCellCallback(task.rowIndex + 2, task.targetColumnIndex, translation);\n                                tasksWithResults++;\n                            } else {\n                                tasksWithoutResults++;\n                            }\n                        }\n                        \n                        if (tasksWithoutResults > 0) {\n                            this.log(`警告: ${tasksWithoutResults} 个单元格未获得翻译结果`, 'warning');\n                        }\n                    }\n                    \n                    this.log(`批次 ${currentBatchId}/${totalBatches} 完成`, 'success');\n                } catch (error) {\n                    this.log(`批次 ${currentBatchId}/${totalBatches} 失败: ${error.message}`, 'error');\n                }\n            }\n            \n            this.log(`翻译任务完成: ${completedBatches}/${totalBatches} 个批次`, \n                completedBatches === totalBatches ? 'success' : 'warning');\n            \n        } catch (error) {\n            this.log(`翻译过程出错: ${error.message}`, 'error');\n            console.error('翻译过程出错:', error);\n        }\n    }\n}\n","import * as XLSX from 'xlsx';\nimport { ProgressBar } from './components/progress.js';\nimport { Logger } from './components/Logger.js';\nimport { TableRenderer } from './components/TableRenderer.js';\nimport { TranslationManager } from './services/TranslationManager.js';\nimport { LanguageUtils } from './utils/LanguageUtils.js';\nimport { readExcelFile, createExcelWorkbook } from './utils/excel.js';\n\n/**\n * Excel翻译器类\n */\nexport class ExcelTranslator {\n    // 静态属性，用于跟踪事件监听器是否已初始化\n    static _eventsInitialized = false;\n    \n    /**\n     * 创建Excel翻译器实例\n     */\n    constructor() {\n        console.log('ExcelTranslator 构造函数被调用');\n        \n        // 初始化UI元素\n        this.tableOutput = document.getElementById('tableOutput');\n        this.logOutput = document.getElementById('logOutput');\n        \n        // 初始化组件\n        this.logger = new Logger(this.logOutput);\n        this.progressBar = new ProgressBar();\n        this.tableRenderer = new TableRenderer(this.tableOutput);\n        \n        // 初始化数据\n        this.data = {};\n        this.currentSheet = null;\n        this.currentFileName = '';\n        this.apiKey = '';\n        this.shouldStopTranslation = false;\n        this.sourceLangSelect = null;\n        \n        // 优先从环境变量获取API密钥\n        if (process.env.ALI_API_KEY) {\n            this.apiKey = process.env.ALI_API_KEY;\n            console.log('已从环境变量加载API密钥');\n        }\n        \n        // 初始化UI和事件监听器\n        this.initializeUI();\n        this.initializeEventListeners();\n    }\n\n    /**\n     * 初始化UI\n     */\n    initializeUI() {\n        // 初始化进度条\n        this.progressBar.show();\n        this.progressBar.updateProgress({ current: 0, total: 100 });\n        this.progressBar.hide();\n\n        // 绑定停止按钮事件\n        const stopBtn = document.getElementById('stopTranslateBtn');\n        if (stopBtn) {\n            // 移除可能存在的旧事件监听器\n            const newStopBtn = stopBtn.cloneNode(true);\n            stopBtn.parentNode.replaceChild(newStopBtn, stopBtn);\n            \n            newStopBtn.addEventListener('click', () => {\n                this.shouldStopTranslation = true;\n                newStopBtn.disabled = true;\n                this.logger.log('正在停止翻译...', 'warning');\n            });\n        }\n    }\n\n    /**\n     * 初始化事件监听器\n     */\n    initializeEventListeners() {\n        console.log('initializeEventListeners 被调用', new Error().stack);\n        \n        // 防止重复注册事件监听器 - 使用静态属性\n        if (ExcelTranslator._eventsInitialized) {\n            console.log('事件监听器已初始化，跳过重复注册');\n            return;\n        }\n        \n        const fileInput = document.getElementById('fileInput');\n        const uploadBtn = document.getElementById('uploadBtn');\n        const translateBtn = document.getElementById('translateBtn');\n        const exportBtn = document.getElementById('exportBtn');\n        const actionButtons = document.getElementById('actionButtons');\n        this.sourceLangSelect = document.getElementById('sourceLang');\n\n        console.log('找到的UI元素:', { \n            fileInput: !!fileInput, \n            uploadBtn: !!uploadBtn, \n            translateBtn: !!translateBtn, \n            exportBtn: !!exportBtn \n        });\n\n        // 处理文件选择按钮点击\n        if (uploadBtn) {\n            console.log('为uploadBtn添加点击事件监听器');\n            uploadBtn.addEventListener('click', () => {\n                console.log('uploadBtn被点击');\n                fileInput?.click();\n            });\n        }\n\n        if (fileInput) {\n            console.log('为fileInput添加change事件监听器');\n            fileInput.addEventListener('change', (e) => {\n                console.log('fileInput change事件触发');\n                this.handleFileSelect(e);\n                if (actionButtons) {\n                    actionButtons.style.display = 'block';\n                }\n            });\n        }\n        \n        if (translateBtn) {\n            console.log('为translateBtn添加点击事件监听器');\n            translateBtn.addEventListener('click', () => {\n                console.log('translateBtn被点击');\n                this.handleTranslateClick();\n            });\n        }\n        \n        if (exportBtn) {\n            console.log('为exportBtn添加点击事件监听器');\n            exportBtn.addEventListener('click', () => {\n                console.log('exportBtn被点击');\n                this.exportToExcel();\n            });\n        }\n        \n        // 标记事件监听器已初始化\n        ExcelTranslator._eventsInitialized = true;\n        console.log('事件监听器初始化完成');\n    }\n\n    /**\n     * 处理文件选择事件\n     * @param {Event} event - 文件选择事件\n     */\n    async handleFileSelect(event) {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        try {\n            this.currentFileName = file.name;\n            this.logger.log(`正在读取文件: ${file.name}`, 'info');\n            this.progressBar.show();\n            \n            // 读取Excel文件\n            this.data = await readExcelFile(file);\n            \n            // 更新工作表选择器\n            this.updateSheetSelector(Object.keys(this.data));\n            \n            // 显示第一个工作表\n            if (Object.keys(this.data).length > 0) {\n                this.currentSheet = Object.keys(this.data)[0];\n                this.displaySheet();\n                this.logger.log(`已加载工作表: ${this.currentSheet}`, 'success');\n            }\n            \n            // 尝试自动检测源语言列\n            this.autoDetectSourceLanguage();\n            \n        } catch (error) {\n            this.logger.log(`读取文件失败: ${error.message}`, 'error');\n            console.error('文件读取错误:', error);\n        } finally {\n            this.progressBar.hide();\n        }\n    }\n\n    /**\n     * 自动检测源语言列\n     */\n    autoDetectSourceLanguage() {\n        if (!this.currentSheet || !this.data[this.currentSheet] || !this.sourceLangSelect) return;\n        \n        const { headerRows } = this.data[this.currentSheet];\n        if (headerRows.length < 2) return;\n        \n        // 获取表头行\n        const headerRow = headerRows[1];\n        \n        // 遍历所有列标题，尝试匹配语言\n        for (let i = 0; i < headerRow.length; i++) {\n            const columnHeader = headerRow[i];\n            const language = LanguageUtils.findLanguageByColumnHeader(columnHeader);\n            \n            if (language === 'Chinese') {\n                // 如果找到中文列，设置为源语言\n                this.sourceLangSelect.value = 'Chinese';\n                this.logger.log(`已自动检测到源语言列: ${columnHeader} (列 ${this.getExcelColumnName(i)})`, 'info');\n                break;\n            }\n        }\n    }\n\n    /**\n     * 更新工作表选择器\n     * @param {Array} sheets - 工作表名称数组\n     */\n    updateSheetSelector(sheets) {\n        const sheetSelector = document.getElementById('sheetSelector');\n        if (!sheetSelector) return;\n\n        // 清除现有选项\n        sheetSelector.innerHTML = '';\n\n        // 添加新选项\n        sheets.forEach(sheetName => {\n            const option = document.createElement('option');\n            option.value = sheetName;\n            option.textContent = sheetName;\n            sheetSelector.appendChild(option);\n        });\n        \n        // 添加工作表切换事件\n        sheetSelector.addEventListener('change', () => {\n            this.currentSheet = sheetSelector.value;\n            this.displaySheet();\n            this.logger.log(`已切换到工作表: ${this.currentSheet}`, 'info');\n        });\n    }\n\n    /**\n     * 显示当前工作表\n     */\n    displaySheet() {\n        if (!this.tableOutput || !this.currentSheet || !this.data[this.currentSheet]) {\n            console.error('无法显示表格：', {\n                tableOutput: !!this.tableOutput,\n                currentSheet: this.currentSheet,\n                hasData: this.data[this.currentSheet] ? true : false\n            });\n            return;\n        }\n\n        const sheetData = this.data[this.currentSheet];\n        \n        // 使用TableRenderer渲染表格\n        this.tableRenderer.renderTable(sheetData, (rowIndex, colIndex, content) => {\n            // 单元格编辑回调\n            if (rowIndex < sheetData.headerRows.length) {\n                sheetData.headerRows[rowIndex][colIndex] = content;\n            } else {\n                const dataRowIndex = rowIndex - sheetData.headerRows.length;\n                // 确保数据行数组有足够的长度\n                while (sheetData.rows.length <= dataRowIndex) {\n                    sheetData.rows.push([]);\n                }\n                // 确保数据行有足够的列\n                while (sheetData.rows[dataRowIndex].length <= colIndex) {\n                    sheetData.rows[dataRowIndex].push('');\n                }\n                sheetData.rows[dataRowIndex][colIndex] = content;\n            }\n        });\n    }\n\n    /**\n     * 处理翻译按钮点击事件\n     */\n    async handleTranslateClick() {\n        if (!this.currentSheet || !this.data[this.currentSheet]) {\n            this.logger.log('没有可翻译的数据', 'warning');\n            return;\n        }\n\n        const translateBtn = document.getElementById('translateBtn');\n        const stopBtn = document.getElementById('stopTranslateBtn');\n        \n        // 显示停止按钮，隐藏翻译按钮\n        if (translateBtn) translateBtn.style.display = 'none';\n        if (stopBtn) {\n            stopBtn.style.display = 'inline-block';\n            stopBtn.disabled = false;\n        }\n        \n        // 重置停止标志\n        this.shouldStopTranslation = false;\n        \n        // 显示进度条\n        this.progressBar.show();\n        this.progressBar.updateProgress({ current: 0, total: 100 });\n        \n        // 获取API密钥，优先使用环境变量中的ALI_API_KEY\n        if (process.env.ALI_API_KEY) {\n            this.apiKey = process.env.ALI_API_KEY;\n            console.log('使用环境变量中的API密钥');\n        } else {\n            this.apiKey = document.getElementById('apiKey')?.value || '';\n        }\n        \n        if (!this.apiKey) {\n            this.logger.log('请输入API密钥', 'error');\n            translateBtn.style.display = 'inline-block';\n            stopBtn.style.display = 'none';\n            this.progressBar.hide();\n            return;\n        }\n        \n        // 获取源语言\n        const sourceLang = this.sourceLangSelect?.value || 'Chinese';\n        const sourceApiCode = LanguageUtils.getApiLanguageCode(sourceLang);\n        \n        // 查找源语言列\n        const { headerRows, rows } = this.data[this.currentSheet];\n        if (headerRows.length < 2) {\n            this.logger.log('错误：表格缺少表头行', 'error');\n            translateBtn.style.display = 'inline-block';\n            stopBtn.style.display = 'none';\n            this.progressBar.hide();\n            return;\n        }\n        \n        const headerRow = headerRows[1];\n        let sourceColumnIndex = -1;\n        \n        // 查找源语言列\n        for (let i = 0; i < headerRow.length; i++) {\n            const columnHeader = headerRow[i];\n            const language = LanguageUtils.findLanguageByColumnHeader(columnHeader);\n            const sourceLanguageConfig = LanguageUtils.getSourceLanguageConfig();\n            \n            if (language === sourceLanguageConfig[LanguageUtils.getLanguageDisplayName(sourceLang)]) {\n                sourceColumnIndex = i;\n                break;\n            }\n        }\n        \n        if (sourceColumnIndex === -1) {\n            this.logger.log(`错误：找不到源语言(${LanguageUtils.getLanguageDisplayName(sourceLang)})列`, 'error');\n            translateBtn.style.display = 'inline-block';\n            stopBtn.style.display = 'none';\n            this.progressBar.hide();\n            return;\n        }\n        \n        // 查找所有目标语言列\n        const targetColumns = [];\n        const sourceLanguageConfig = LanguageUtils.getSourceLanguageConfig();\n        \n        for (let i = 0; i < headerRow.length; i++) {\n            if (i === sourceColumnIndex) continue;\n            \n            const columnHeader = headerRow[i];\n            const language = LanguageUtils.findLanguageByColumnHeader(columnHeader);\n            \n            if (language && language !== sourceLanguageConfig[LanguageUtils.getLanguageDisplayName(sourceLang)]) {\n                targetColumns.push({\n                    index: i,\n                    langCode: language,\n                    display: columnHeader\n                });\n            }\n        }\n        \n        if (targetColumns.length === 0) {\n            this.logger.log('错误：找不到任何目标语言列', 'error');\n            translateBtn.style.display = 'inline-block';\n            stopBtn.style.display = 'none';\n            this.progressBar.hide();\n            return;\n        }\n        \n        this.logger.log(`开始翻译，源语言: ${LanguageUtils.getLanguageDisplayName(sourceLang)} (列 ${this.getExcelColumnName(sourceColumnIndex)})`, 'info');\n        this.logger.log('目标语言: ' + targetColumns.map(c => `${c.display} (列 ${this.getExcelColumnName(c.index)})`).join(', '), 'info');\n        \n        try {\n            // 创建翻译管理器\n            const translationManager = new TranslationManager(\n                this.apiKey, \n                this.logger.log.bind(this.logger),\n                this.progressBar\n            );\n            \n            // 设置停止按钮事件\n            if (stopBtn) {\n                // 移除可能存在的旧事件监听器\n                const newStopBtn = stopBtn.cloneNode(true);\n                stopBtn.parentNode.replaceChild(newStopBtn, stopBtn);\n                \n                newStopBtn.onclick = () => {\n                    this.shouldStopTranslation = true;\n                    translationManager.stopTranslation();\n                    newStopBtn.disabled = true;\n                    this.logger.log('正在停止翻译...', 'warning');\n                };\n            }\n            \n            // 执行翻译\n            await translationManager.executeTranslation(\n                rows,\n                sourceColumnIndex,\n                sourceLang,\n                targetColumns,\n                (rowIndex, colIndex, text) => {\n                    // 更新单元格回调\n                    this.tableRenderer.updateCellInDOM(rowIndex, colIndex, text, headerRows.length);\n                }\n            );\n            \n        } catch (error) {\n            console.error('翻译过程出错:', error);\n            this.logger.log(`翻译过程出错: ${error.message || String(error)}`, 'error');\n        } finally {\n            translateBtn.style.display = 'inline-block';\n            stopBtn.style.display = 'none';\n            stopBtn.disabled = true;\n            this.progressBar.hide();\n        }\n    }\n\n    /**\n     * 导出到Excel\n     */\n    async exportToExcel() {\n        if (!this.currentSheet || !this.data[this.currentSheet]) {\n            this.logger.log('没有可导出的数据', 'warning');\n            return;\n        }\n\n        try {\n            const workbook = createExcelWorkbook(this.data);\n            XLSX.writeFile(workbook, `${this.currentFileName.replace('.xlsx', '')}_translated.xlsx`);\n            this.logger.log('导出成功', 'success');\n        } catch (error) {\n            if (error instanceof Error) {\n                this.logger.log(`导出失败: ${error.message}`, 'error');\n            } else {\n                this.logger.log('导出失败: 未知错误', 'error');\n            }\n        }\n    }\n\n    /**\n     * 获取Excel列名\n     * @param {number} index - 列索引\n     * @returns {string} - 列名\n     */\n    getExcelColumnName(index) {\n        return this.tableRenderer.getExcelColumnName(index);\n    }\n}\n","import * as XLSX from 'xlsx';\n\n/**\n * 读取Excel文件并解析内容\n * @param {File} file - Excel文件\n * @returns {Promise<Object>} - 解析后的数据，按工作表名称组织\n */\nexport function readExcelFile(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        \n        reader.onload = (e) => {\n            try {\n                const data = e.target?.result;\n                const workbook = XLSX.read(data, { type: 'binary' });\n                const result = {};\n\n                workbook.SheetNames.forEach(sheetName => {\n                    const worksheet = workbook.Sheets[sheetName];\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n                    \n                    // 分离表头行和数据行\n                    const headerRows = jsonData.slice(0, 2);\n                    const rows = jsonData.slice(2);\n\n                    result[sheetName] = {\n                        headerRows,\n                        rows\n                    };\n                });\n\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        };\n\n        reader.onerror = () => {\n            reject(new Error('文件读取失败'));\n        };\n\n        reader.readAsBinaryString(file);\n    });\n}\n\n/**\n * 创建Excel工作簿\n * @param {Object} data - 数据对象，按工作表名称组织\n * @returns {XLSX.WorkBook} - 创建的工作簿\n */\nexport function createExcelWorkbook(data) {\n    const workbook = XLSX.utils.book_new();\n\n    Object.entries(data).forEach(([sheetName, sheetData]) => {\n        const allRows = [...sheetData.headerRows, ...sheetData.rows];\n        const worksheet = XLSX.utils.aoa_to_sheet(allRows);\n        XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\n    });\n\n    return workbook;\n}\n\n/**\n * 获取Excel列名\n * @param {number} index - 列索引\n * @returns {string} - 列名（如A, B, AA等）\n */\nexport function getExcelColumnName(index) {\n    let columnName = '';\n    while (index >= 0) {\n        columnName = String.fromCharCode(65 + (index % 26)) + columnName;\n        index = Math.floor(index / 26) - 1;\n    }\n    return columnName;\n}\n","import './styles.css';\r\nimport { ExcelTranslator } from './ExcelTranslator.js';\r\n\r\nconsole.log('index.js 被加载');\r\n\r\n// 初始化应用\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n    console.log('DOMContentLoaded 事件触发');\r\n    \r\n    // 检查是否已经有实例\r\n    if (window.excelTranslatorInstance) {\r\n        console.log('已存在 ExcelTranslator 实例，不再创建新实例');\r\n        return;\r\n    }\r\n    \r\n    console.log('创建新的 ExcelTranslator 实例');\r\n    window.excelTranslatorInstance = new ExcelTranslator();\r\n    console.log('ExcelTranslator 实例创建完成');\r\n});\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.j = 792;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkai_translate\"] = self[\"webpackChunkai_translate\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","__webpack_require__.nc = undefined;","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [121], () => (__webpack_require__(6437)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","ProgressBar","constructor","this","progressContainer","document","querySelector","progressFill","progressText","progressDetails","progressBatchCounter","createElement","className","style","textAlign","marginTop","fontSize","color","parentNode","insertBefore","nextSibling","updateProgress","data","percentage","current","total","width","textContent","Math","round","text","updateBatchProgress","progress","overallPercentage","completedBatches","totalBatches","currentBatchId","batchProgress","completedTasksInCurrentBatch","totalTasksInCurrentBatch","reset","show","display","hide","Logger","container","log","message","type","logEntry","Date","toLocaleTimeString","appendChild","scrollTop","scrollHeight","TableRenderer","getExcelColumnName","index","columnName","String","fromCharCode","floor","updateCellInDOM","rowIndex","colIndex","headerRowsCount","tableWrapper","table","rows","querySelectorAll","targetRow","i","length","row","rowNumberCell","toString","children","cell","renderTable","sheetData","onCellEdit","innerHTML","headerRows","allRows","maxColumns","max","map","colNumberRow","emptyTh","th","forEach","tr","td","contentEditable","addEventListener","addTableStyles","styleId","getElementById","id","head","global","Headers","fetch","instance","console","embeddingService","ollamaUrl","modelName","qdrantUrl","collectionName","vectorSize","qdrantClient","url","checkCompatibility","timeout","retries","initializeCollection","delay","getCollections","collections","some","c","name","collectionInfo","getCollection","JSON","stringify","config","checkIfCollectionNeedsRecreation","deleteCollection","createCollection","vectors","vector_cn","size","distance","vector_en","infoError","error","includes","Promise","resolve","setTimeout","params","cnVectorSize","enVectorSize","generateEmbedding","trim","Error","requestBody","model","prompt","response","method","headers","body","ok","errorText","status","responseText","parse","embedding","Array","isArray","storeEmbedding","metadata","success","uuid","randomUUID","upsert","wait","points","vector","payload","storeEntryVectors","entry","Chinese","chineseEmbedding","cnError","englishEmbedding","English","enError","Japanese","Korean","Spanish","French","German","Russian","Thai","Italian","Indonesian","Portuguese","updateEntryVectors","point","testService","checkQdrantConnection","testText","collectionExists","embeddingDimension","join","searchSimilar","language","limit","isEnglish","toLowerCase","vectorName","searchResults","search","with_payload","qdrantError","initError","results","result","similarity","score","calculateCosineSimilarity","vec1","vec2","dotProduct","norm1","norm2","sqrt","deleteEmbedding","delete","addToVectorStore","substring","deleteVector","LanguageUtils","getSourceLanguages","getSourceLanguageConfig","getLanguageMappings","columnHeader","targetLang","getLanguageDisplayName","langCode","getApiLanguageCode","findLanguageByColumnHeader","mappings","mapping","getLanguageName","TranslationService","apiKey","logCallback","apiEndpoint","shouldStopTranslation","stopTranslation","resetStopFlag","getTranslationMemory","sourceLanguage","targetLanguage","standardSourceLang","standardTargetLang","vectorLanguage","similarEntries","sourceField","targetField","tmList","sourceText","targetText","push","source","target","Object","keys","vectorError","translateBatch","batch","tasks","rowIndices","task","minRow","min","maxRow","rowRange","sourceLang","to","batchId","validTasks","filter","undefined","translateSingle","sourceTexts","t","idx","messages","role","content","temperature","max_tokens","choices","translatedContent","translatedResults","jsonMatch","match","jsonContent","parseError","translationMap","translation","translatedCount","missingCount","textType","from","TranslationManager","progressBar","createBatches","items","batchSize","batches","slice","prepareTranslationTasks","sourceColumnIndex","targetColumns","translationTasks","targetColumn","targetColumnIndex","organizeTasksIntoBatches","tasksByLanguage","lang","langTasks","langBatches","completed","executeTranslation","updateCellCallback","translationService","tasksWithResults","tasksWithoutResults","ExcelTranslator","static","tableOutput","logOutput","logger","tableRenderer","currentSheet","currentFileName","sourceLangSelect","initializeUI","initializeEventListeners","stopBtn","newStopBtn","cloneNode","replaceChild","disabled","stack","_eventsInitialized","fileInput","uploadBtn","translateBtn","exportBtn","actionButtons","click","e","handleFileSelect","handleTranslateClick","exportToExcel","event","file","files","reject","reader","FileReader","onload","workbook","SheetNames","sheetName","worksheet","Sheets","jsonData","sheet_to_json","header","onerror","readAsBinaryString","readExcelFile","updateSheetSelector","displaySheet","autoDetectSourceLanguage","headerRow","value","sheets","sheetSelector","option","hasData","dataRowIndex","sourceLanguageConfig","translationManager","bind","onclick","book_new","entries","aoa_to_sheet","book_append_sheet","createExcelWorkbook","replace","window","excelTranslatorInstance","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","key","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","nc","__webpack_exports__"],"sourceRoot":""}