{"version":3,"file":"knowledgeBase.bundle.js","mappings":"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","sources":["webpack://excel-to-structured-data/webpack/runtime/chunk loaded","webpack://excel-to-structured-data/./src/services/api.js","webpack://excel-to-structured-data/./src/utils/kb-utils.js","webpack://excel-to-structured-data/./src/components/kb-modals.js","webpack://excel-to-structured-data/./src/components/kb-table-renderer.js","webpack://excel-to-structured-data/./src/knowledge-base.js","webpack://excel-to-structured-data/webpack/bootstrap","webpack://excel-to-structured-data/webpack/runtime/compat get default export","webpack://excel-to-structured-data/webpack/runtime/define property getters","webpack://excel-to-structured-data/webpack/runtime/global","webpack://excel-to-structured-data/webpack/runtime/hasOwnProperty shorthand","webpack://excel-to-structured-data/webpack/runtime/node module decorator","webpack://excel-to-structured-data/webpack/runtime/runtimeId","webpack://excel-to-structured-data/webpack/runtime/jsonp chunk loading","webpack://excel-to-structured-data/webpack/runtime/nonce","webpack://excel-to-structured-data/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","/**\n * API服务类\n */\nexport class ApiService {\n    /**\n     * 构造函数\n     */\n    constructor() {\n        this.baseUrl = 'http://localhost:3000/api';\n        this.debug = true; // 启用调试模式\n        console.log('ApiService: 初始化，baseUrl =', this.baseUrl);\n    }\n\n    /**\n     * 设置调试模式\n     * @param {boolean} debug - 是否启用调试模式\n     */\n    setDebug(debug) {\n        this.debug = debug;\n        console.log('ApiService: 调试模式', debug ? '开启' : '关闭');\n    }\n\n    /**\n     * 调试日志\n     * @param {string} message - 日志消息\n     * @param {any} data - 日志数据\n     * @private\n     */\n    logDebug(message, data) {\n        if (this.debug) {\n            if (data) {\n                console.log(`[API] ${message}`, data);\n            } else {\n                console.log(`[API] ${message}`);\n            }\n        }\n    }\n\n    /**\n     * 获取服务器状态\n     * @returns {Promise<{status: string, message: string}>} - 服务器状态\n     */\n    async getStatus() {\n        try {\n            const response = await fetch(`${this.baseUrl}/status`);\n            if (!response.ok) {\n                throw new Error(`服务器响应错误: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('获取服务器状态失败:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * 获取翻译条目\n     * @param {string} searchTerm - 搜索关键词\n     * @returns {Promise<Array>} - 翻译条目数组\n     */\n    async getEntries(searchTerm) {\n        try {\n            const response = await fetch(`${this.baseUrl}/entries${searchTerm ? `?search=${searchTerm}` : ''}`);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('获取条目失败:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * 向量搜索\n     * @param {string} text - 搜索文本\n     * @param {number} limit - 结果数量限制\n     * @returns {Promise<Array>} - 搜索结果数组\n     */\n    async vectorSearch(text, limit = 10) {\n        try {\n            const response = await fetch(`${this.baseUrl}/vector-search`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ text, limit }),\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('向量搜索失败:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * 添加翻译条目\n     * @param {Object} entry - 翻译条目\n     * @returns {Promise<boolean>} - 是否添加成功\n     */\n    async addEntry(entry) {\n        try {\n            const response = await fetch(`${this.baseUrl}/entries`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(entry),\n            });\n\n            return response.ok;\n        } catch (error) {\n            console.error('添加条目失败:', error);\n            return false;\n        }\n    }\n\n    /**\n     * 更新翻译条目\n     * @param {string} chinese - 中文关键字\n     * @param {Object} entry - 更新的翻译条目\n     * @returns {Promise<boolean>} - 是否更新成功\n     */\n    async updateEntry(chinese, entry) {\n        try {\n            const response = await fetch(`${this.baseUrl}/entries/${encodeURIComponent(chinese)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(entry),\n            });\n\n            return response.ok;\n        } catch (error) {\n            console.error('更新条目失败:', error);\n            return false;\n        }\n    }\n\n    /**\n     * 删除翻译条目\n     * @param {string} chinese - 中文关键字\n     * @returns {Promise<boolean>} - 是否删除成功\n     */\n    async deleteEntry(chinese) {\n        try {\n            console.log(`API服务 - 删除条目，原始ID: \"${chinese}\"`);\n            const cleanId = chinese.replace(/[\\r\\n]+/g, ' ').trim();\n            console.log(`API服务 - 删除条目，处理后ID: \"${cleanId}\"`);\n\n            const response = await fetch(`${this.baseUrl}/entries/${encodeURIComponent(cleanId)}`, {\n                method: 'DELETE',\n            });\n\n            if (!response.ok) {\n                console.error(`API服务 - 删除条目失败，状态码: ${response.status}`);\n                return false;\n            }\n\n            console.log('API服务 - 删除条目成功');\n            return true;\n        } catch (error) {\n            console.error('删除条目失败:', error);\n            return false;\n        }\n    }\n\n    /**\n     * 导入Excel文件\n     * @param {File} file - Excel文件\n     * @returns {Promise<{success: boolean, count: number, error?: string}>} - 导入结果\n     */\n    async importExcel(file) {\n        try {\n            console.log('ApiService: 开始导入Excel文件', file.name, file.size);\n            \n            // 检查文件类型\n            if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {\n                console.error('ApiService: 文件格式不支持', file.name);\n                return { success: false, count: 0, error: '只支持.xlsx或.xls格式的Excel文件' };\n            }\n            \n            const formData = new FormData();\n            formData.append('file', file);\n            console.log('ApiService: FormData已创建并添加文件');\n\n            // 打印请求信息\n            console.log('ApiService: 请求URL:', `${this.baseUrl}/import`);\n            console.log('ApiService: 请求方法:', 'POST');\n            console.log('ApiService: 文件类型:', file.type);\n\n            console.log('ApiService: 开始发送请求到', `${this.baseUrl}/import`);\n            const response = await fetch(`${this.baseUrl}/import`, {\n                method: 'POST',\n                body: formData,\n            });\n            console.log('ApiService: 收到响应', response.status, response.statusText);\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('ApiService: 导入失败', response.status, errorText);\n                return { success: false, count: 0, error: `导入失败: ${response.status} - ${errorText}` };\n            }\n\n            const result = await response.json();\n            console.log('ApiService: 导入成功', result);\n            return { success: true, count: result.count || 0 };\n        } catch (error) {\n            console.error('ApiService: 导入Excel失败:', error);\n            return { success: false, count: 0, error: error.message };\n        }\n    }\n\n    /**\n     * 导出Excel文件\n     * @returns {Promise<Blob>} - Excel文件Blob\n     */\n    async exportExcel() {\n        try {\n            const response = await fetch(`${this.baseUrl}/export`);\n            if (!response.ok) {\n                throw new Error(`导出Excel失败: ${response.status}`);\n            }\n            return await response.blob();\n        } catch (error) {\n            console.error('导出Excel失败:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * 初始化数据库\n     * @returns {Promise<void>}\n     */\n    async initializeDatabase() {\n        try {\n            await this.getStatus();\n            console.log('API服务器连接成功');\n        } catch (error) {\n            console.error('API服务器连接失败:', error);\n            throw new Error('无法连接到API服务器，请确保服务器已启动');\n        }\n    }\n}\n\nexport const apiService = new ApiService();\n","/**\n * 知识库管理器工具函数\n */\n\n// HTML转义函数\n/**\n * 转义HTML特殊字符\n * @param {string} text - 要转义的文本\n * @returns {string} 转义后的文本\n */\nexport function escapeHtml(text) {\n    if (!text) return '';\n    return text\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n\n// 定义语言字段映射，避免重复代码\nexport const languageFields = [\n    { key: 'Chinese', label: '中文' },\n    { key: 'English', label: '英文' },\n    { key: 'Japanese', label: '日文' },\n    { key: 'Korean', label: '韩文' },\n    { key: 'Spanish', label: '西班牙文' },\n    { key: 'French', label: '法文' },\n    { key: 'German', label: '德文' },\n    { key: 'Russian', label: '俄文' },\n    { key: 'Thai', label: '泰文' },\n    { key: 'Italian', label: '意大利文' },\n    { key: 'Indonesian', label: '印尼文' },\n    { key: 'Portuguese', label: '葡萄牙文' }\n];\n\n// 日志记录函数\n/**\n * 创建日志记录函数\n * @param {HTMLElement} logOutput - 日志输出的DOM元素\n * @returns {Function} 日志记录函数\n */\nexport function createLogger(logOutput) {\n    return function log(message, type = 'info') {\n        if (!logOutput) return;\n\n        const logEntry = document.createElement('div');\n        logEntry.className = `log-entry ${type}`;\n        logEntry.textContent = message;\n        logOutput.appendChild(logEntry);\n        logOutput.scrollTop = logOutput.scrollHeight;\n    };\n}\n","import { ApiService } from '../services/api.js';\nimport { languageFields } from '../utils/kb-utils.js';\n\n/**\n * 知识库模态框管理类\n */\nexport class KnowledgeBaseModals {\n    /**\n     * @param {Object} manager - 知识库管理器实例\n     */\n    constructor(manager) {\n        this.manager = manager;\n        this.apiService = new ApiService();\n    }\n\n    /**\n     * 显示条目详情模态框\n     * @param {Object} entry - 翻译条目\n     */\n    showEntryDetails(entry) {\n        const modal = document.createElement('div');\n        modal.className = 'modal';\n        \n        let content = `\n            <div class=\"modal-content\">\n                <span class=\"close\">&times;</span>\n                <h2>查看翻译条目</h2>\n                <div class=\"entry-details\">\n        `;\n        \n        languageFields.forEach(field => {\n            const value = entry[field.key];\n            content += `\n                <div class=\"entry-field\">\n                    <label>${field.label}:</label>\n                    <div class=\"field-value\">${value || ''}</div>\n                </div>\n            `;\n        });\n        \n        content += `\n                </div>\n            </div>\n        `;\n        \n        modal.innerHTML = content;\n        document.body.appendChild(modal);\n        \n        // 添加关闭按钮事件\n        const closeBtn = modal.querySelector('.close');\n        if (closeBtn) {\n            closeBtn.addEventListener('click', () => {\n                document.body.removeChild(modal);\n            });\n        }\n    }\n\n    /**\n     * 显示编辑条目模态框\n     * @param {Object} entry - 翻译条目\n     */\n    showEditEntryForm(entry) {\n        const modal = document.createElement('div');\n        modal.className = 'modal';\n        \n        let content = `\n            <div class=\"modal-content\">\n                <span class=\"close\">&times;</span>\n                <h2>编辑翻译条目</h2>\n                <form id=\"editEntryForm\">\n                    <input type=\"hidden\" id=\"entryChinese\" value=\"${entry.Chinese}\">\n        `;\n        \n        // 添加所有可编辑字段\n        languageFields.forEach(field => {\n            const value = entry[field.key];\n            content += `\n                <div class=\"form-group\">\n                    <label for=\"${field.key}\">${field.label}:</label>\n                    <textarea id=\"${field.key}\" class=\"form-control\" rows=\"2\">${value || ''}</textarea>\n                </div>\n            `;\n        });\n        \n        content += `\n                    <div class=\"form-group\">\n                        <button type=\"submit\" class=\"btn\">保存</button>\n                        <button type=\"button\" class=\"btn cancel-btn\">取消</button>\n                    </div>\n                </form>\n            </div>\n        `;\n        \n        modal.innerHTML = content;\n        document.body.appendChild(modal);\n        \n        // 添加关闭按钮事件\n        const closeBtn = modal.querySelector('.close');\n        const cancelBtn = modal.querySelector('.cancel-btn');\n        \n        const closeModal = () => {\n            document.body.removeChild(modal);\n        };\n        \n        if (closeBtn) {\n            closeBtn.addEventListener('click', closeModal);\n        }\n        \n        if (cancelBtn) {\n            cancelBtn.addEventListener('click', closeModal);\n        }\n        \n        // 添加表单提交事件\n        const form = modal.querySelector('#editEntryForm');\n        form.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            \n            const entryChinese = document.getElementById('entryChinese').value;\n            const updatedEntry = {};\n            \n            // 收集表单数据\n            languageFields.forEach(field => {\n                const input = document.getElementById(field.key);\n                if (input && input.value) {\n                    updatedEntry[field.key] = input.value;\n                }\n            });\n            \n            try {\n                // 使用API服务更新条目\n                await this.apiService.updateEntry(entryChinese, updatedEntry);\n                this.manager.log('条目更新成功', 'info');\n                document.body.removeChild(modal);\n                \n                // 刷新数据\n                await this.manager.loadEntries();\n            } catch (error) {\n                this.manager.log(`更新失败: ${error.message}`, 'error');\n            }\n        });\n    }\n\n    /**\n     * 显示添加条目模态框\n     */\n    showAddEntryForm() {\n        const modal = document.createElement('div');\n        modal.className = 'modal';\n        \n        let content = `\n            <div class=\"modal-content\">\n                <span class=\"close\">&times;</span>\n                <h2>添加翻译条目</h2>\n                <form id=\"addEntryForm\">\n        `;\n        \n        // 添加所有可编辑字段\n        languageFields.forEach(field => {\n            content += `\n                <div class=\"form-group\">\n                    <label for=\"${field.key}\">${field.label}:</label>\n                    <textarea id=\"${field.key}\" class=\"form-control\" rows=\"2\"></textarea>\n                </div>\n            `;\n        });\n        \n        content += `\n                    <div class=\"form-group\">\n                        <button type=\"submit\" class=\"btn\">保存</button>\n                        <button type=\"button\" class=\"btn cancel-btn\">取消</button>\n                    </div>\n                </form>\n            </div>\n        `;\n        \n        modal.innerHTML = content;\n        document.body.appendChild(modal);\n        \n        // 添加关闭按钮事件\n        const closeBtn = modal.querySelector('.close');\n        const cancelBtn = modal.querySelector('.cancel-btn');\n        \n        const closeModal = () => {\n            document.body.removeChild(modal);\n        };\n        \n        if (closeBtn) {\n            closeBtn.addEventListener('click', closeModal);\n        }\n        \n        if (cancelBtn) {\n            cancelBtn.addEventListener('click', closeModal);\n        }\n        \n        // 添加表单提交事件\n        const form = modal.querySelector('#addEntryForm');\n        form.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            \n            const newEntry = {};\n            \n            // 收集表单数据\n            languageFields.forEach(field => {\n                const input = document.getElementById(field.key);\n                if (input && input.value) {\n                    newEntry[field.key] = input.value;\n                }\n            });\n\n            // 验证必填字段\n            if (!newEntry.Chinese) {\n                this.manager.log('中文字段不能为空', 'error');\n                return;\n            }\n            \n            try {\n                // 使用API服务添加条目\n                await this.apiService.addEntry(newEntry);\n                this.manager.log('条目添加成功', 'info');\n                document.body.removeChild(modal);\n                \n                // 刷新数据\n                await this.manager.loadEntries();\n            } catch (error) {\n                this.manager.log(`添加失败: ${error.message}`, 'error');\n            }\n        });\n    }\n}\n","import { escapeHtml } from '../utils/kb-utils.js';\nimport { KnowledgeBaseModals } from './kb-modals.js';\n\n/**\n * 知识库表格渲染类\n */\nexport class KnowledgeBaseTableRenderer {\n    /**\n     * @param {HTMLElement} container - 表格容器元素\n     * @param {Object} manager - 知识库管理器实例\n     * @param {Function} deleteEntryCallback - 删除条目的回调函数\n     */\n    constructor(container, manager, deleteEntryCallback) {\n        this.container = container;\n        this.manager = manager;\n        this.modals = new KnowledgeBaseModals(manager);\n        this.deleteEntryCallback = deleteEntryCallback;\n        this.currentEntries = [];\n    }\n\n    /**\n     * 渲染翻译条目表格\n     * @param {Array} entries - 翻译条目数组\n     */\n    renderTable(entries) {\n        this.currentEntries = entries;\n        \n        if (!this.container) return;\n\n        // 创建表格容器\n        this.container.innerHTML = `\n            <table class=\"kb-table\">\n                <thead>\n                    <tr>\n                        <th class=\"checkbox-cell\"><input type=\"checkbox\" id=\"selectAll\"></th>\n                        <th>中文</th>\n                        <th>英文</th>\n                        <th>日文</th>\n                        <th>韩文</th>\n                        <th>西班牙文</th>\n                        <th>法文</th>\n                        <th>德文</th>\n                        <th>俄文</th>\n                        <th>泰文</th>\n                        <th>意大利文</th>\n                        <th>印尼文</th>\n                        <th>葡萄牙文</th>\n                    </tr>\n                </thead>\n                <tbody id=\"entriesTableBody\">\n                </tbody>\n            </table>\n        `;\n\n        // 获取表格体\n        const tableBody = document.getElementById('entriesTableBody');\n        if (!tableBody) return;\n\n        // 添加表格内容\n        entries.forEach((entry, index) => {\n            const tr = document.createElement('tr');\n            tr.innerHTML = `\n                <td class=\"checkbox-cell\"><input type=\"checkbox\" class=\"entry-checkbox\" data-id=\"${entry.Chinese}\"></td>\n                <td class=\"content-cell\">${escapeHtml(entry.Chinese || '')}</td>\n                <td class=\"content-cell\">${escapeHtml(entry.English || '')}</td>\n                <td class=\"content-cell\">${escapeHtml(entry.Japanese || '')}</td>\n                <td class=\"content-cell\">${escapeHtml(entry.Korean || '')}</td>\n                <td class=\"content-cell\">${escapeHtml(entry.Spanish || '')}</td>\n                <td class=\"content-cell\">${escapeHtml(entry.French || '')}</td>\n                <td class=\"content-cell\">${escapeHtml(entry.German || '')}</td>\n                <td class=\"content-cell\">${escapeHtml(entry.Russian || '')}</td>\n                <td class=\"content-cell\">${escapeHtml(entry.Thai || '')}</td>\n                <td class=\"content-cell\">${escapeHtml(entry.Italian || '')}</td>\n                <td class=\"content-cell\">${escapeHtml(entry.Indonesian || '')}</td>\n                <td class=\"content-cell\">${escapeHtml(entry.Portuguese || '')}</td>\n            `;\n            tableBody.appendChild(tr);\n        });\n\n        this.initializeTableEvents();\n    }\n\n    /**\n     * 初始化表格事件\n     */\n    initializeTableEvents() {\n        // 添加全选功能\n        const selectAllCheckbox = document.getElementById('selectAll');\n        if (selectAllCheckbox) {\n            selectAllCheckbox.addEventListener('change', () => {\n                const checkboxes = document.querySelectorAll('.entry-checkbox');\n                checkboxes.forEach(checkbox => {\n                    checkbox.checked = selectAllCheckbox.checked;\n                });\n            });\n        }\n\n        // 为每行添加双击事件，显示详情\n        const tableRows = document.querySelectorAll('#entriesTableBody tr');\n        tableRows.forEach(row => {\n            row.addEventListener('dblclick', () => {\n                const checkbox = row.querySelector('.entry-checkbox');\n                if (checkbox) {\n                    const chinese = checkbox.getAttribute('data-id') || '';\n                    const entry = this.currentEntries.find(e => e.Chinese === chinese);\n                    if (entry) {\n                        this.modals.showEntryDetails(entry);\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * 获取选中的条目ID\n     * @returns {Array<string>} 选中的条目ID数组\n     */\n    getSelectedEntryIds() {\n        const selectedIds = [];\n        const checkboxes = document.querySelectorAll('.entry-checkbox:checked');\n        \n        checkboxes.forEach(checkbox => {\n            const chinese = checkbox.getAttribute('data-id') || '';\n            if (chinese) {\n                selectedIds.push(chinese);\n            }\n        });\n        \n        return selectedIds;\n    }\n\n    /**\n     * 显示添加条目表单\n     */\n    showAddEntryForm() {\n        this.modals.showAddEntryForm();\n    }\n}\n","import './styles.css';\nimport { ApiService } from './services/api.js';\nimport { KnowledgeBaseModals } from './components/kb-modals.js';\nimport { KnowledgeBaseTableRenderer } from './components/kb-table-renderer.js';\nimport * as XLSX from 'xlsx';\nimport { createLogger } from './utils/kb-utils.js';\n\n// 添加全局实例变量，用于检查是否已经初始化\n// 注意：在JavaScript中，我们不需要声明global接口，直接使用window对象\n\nexport class KnowledgeBaseManager {\n    constructor() {\n        // 初始化属性\n        this.currentEntries = [];\n        \n        // 初始化所有DOM元素\n        this.initializeDOMElements();\n        \n        // 初始化日志函数\n        this.logFunction = createLogger(this.logOutput);\n        \n        // 初始化表格渲染器\n        this.tableRenderer = new KnowledgeBaseTableRenderer(\n            this.kbTableOutput, \n            this,\n            this.deleteEntry.bind(this)\n        );\n        \n        // 初始化apiService\n        this.apiService = new ApiService(); // 在构造函数中初始化\n        \n        // 检查是否已经初始化过，避免重复注册事件监听器\n        if (!window.knowledgeBaseManagerInstance) {\n            // 初始化事件监听器\n            this.initialize();\n            window.knowledgeBaseManagerInstance = this;\n        }\n    }\n\n    /**\n     * 初始化DOM元素\n     */\n    initializeDOMElements() {\n        this.fileInput = document.getElementById('fileInput');\n        this.fileName = document.getElementById('fileName');\n        this.uploadBtn = document.getElementById('uploadBtn');\n        this.actionButtons = document.getElementById('actionButtons');\n        this.logOutput = document.getElementById('logOutput');\n        this.progressFill = document.getElementById('progressFill');\n        this.progressText = document.getElementById('progressText');\n        this.progressDetails = document.getElementById('progressDetails');\n        this.searchInput = document.getElementById('searchInput');\n        this.searchBtn = document.getElementById('searchBtn');\n        this.kbTableOutput = document.getElementById('kbTableOutput');\n        this.deleteSelectedBtn = document.getElementById('deleteSelectedBtn');\n        \n        // 检查必要的DOM元素是否存在\n        if (!this.fileInput || !this.uploadBtn || !this.kbTableOutput) {\n            console.error('无法找到必要的DOM元素');\n        }\n    }\n\n    /**\n     * 初始化数据库连接\n     */\n    async initializeDatabase() {\n        try {\n            await this.loadEntries();\n            this.log('数据库连接成功');\n        } catch (error) {\n            this.log(`数据库连接失败: ${error.message}`, 'error');\n        }\n    }\n\n    /**\n     * 初始化事件监听器\n     */\n    initializeEventListeners() {\n        // 文件选择事件\n        this.fileInput.addEventListener('change', (event) => {\n            const files = event.target.files;\n            if (files && files.length > 0) {\n                const file = files[0];\n                this.fileName.textContent = file.name;\n                this.actionButtons.style.display = 'block';\n                \n                // 自动开始导入流程\n                this.importFile(file);\n            }\n        });\n\n        // 上传按钮事件 - 触发文件选择对话框\n        this.uploadBtn.addEventListener('click', () => {\n            this.fileInput.click(); // 点击上传按钮时触发文件选择对话框\n        });\n\n        // 搜索按钮事件\n        this.searchBtn.addEventListener('click', async () => {\n            const searchTerm = this.searchInput.value.trim();\n            await this.loadEntries(searchTerm);\n        });\n\n        // 搜索输入框回车事件\n        this.searchInput.addEventListener('keypress', (event) => {\n            if (event.key === 'Enter') {\n                const searchTerm = this.searchInput.value.trim();\n                this.loadEntries(searchTerm).then();\n            }\n        });\n\n        // 批量删除按钮事件\n        this.deleteSelectedBtn.addEventListener('click', async () => {\n            const selectedIds = this.tableRenderer.getSelectedEntryIds();\n            \n            if (selectedIds.length === 0) {\n                this.log('请先选择要删除的条目', 'error');\n                return;\n            }\n            \n            const confirmDelete = confirm(`确定要删除选中的 ${selectedIds.length} 条记录吗？`);\n            if (!confirmDelete) return;\n            \n            try {\n                let successCount = 0;\n                let failCount = 0;\n                \n                for (const id of selectedIds) {\n                    try {\n                        // 确保ID正确处理，打印出实际发送的ID以便调试\n                        console.log(`原始ID: \"${id}\"`);\n                        \n                        // 预处理ID，移除换行符\n                        const cleanId = id.replace(/[\\r\\n]+/g, ' ').trim();\n                        console.log(`处理后ID: \"${cleanId}\"`);\n                        \n                        const success = await this.apiService.deleteEntry(cleanId);\n                        if (success) {\n                            successCount++;\n                        } else {\n                            failCount++;\n                            this.log(`删除失败: ${cleanId}`, 'error');\n                        }\n                    } catch (error) {\n                        failCount++;\n                        this.log(`删除失败 \"${id}\": ${error.message}`, 'error');\n                    }\n                }\n                \n                this.log(`批量删除完成，成功: ${successCount}，失败: ${failCount}`);\n                \n                // 刷新数据\n                await this.loadEntries();\n            } catch (error) {\n                this.log(`批量删除失败: ${error.message}`, 'error');\n            }\n        });\n    }\n\n    /**\n     * 加载翻译条目\n     * @param {string} [searchTerm] - 可选的搜索词\n     * @returns {Promise<void>}\n     */\n    async loadEntries(searchTerm) {\n        try {\n            // 始终从数据库重新加载数据，确保数据是最新的\n            const entries = await this.apiService.getEntries();\n            this.currentEntries = entries;\n            \n            // 如果有搜索词，则在新加载的数据中过滤\n            if (searchTerm) {\n                const searchTermLower = searchTerm.toLowerCase();\n                const filteredEntries = this.currentEntries.filter(entry => {\n                    // 在所有字段中搜索\n                    return Object.values(entry).some(value => {\n                        if (typeof value === 'string') {\n                            return value.toLowerCase().includes(searchTermLower);\n                        }\n                        return false;\n                    });\n                });\n                \n                this.tableRenderer.renderTable(filteredEntries);\n                this.log(`找到 ${filteredEntries.length} 条匹配记录`);\n            } else {\n                // 没有搜索词，显示所有数据\n                this.tableRenderer.renderTable(entries);\n                this.log(`加载了 ${entries.length} 条记录`);\n            }\n        } catch (error) {\n            console.error('加载条目时出错:', error);\n            this.log('加载条目失败', 'error');\n        }\n    }\n\n    /**\n     * 搜索条目\n     * @param {string} searchTerm - 搜索词\n     * @returns {Promise<Array>} - 返回匹配的翻译条目\n     */\n    async searchEntries(searchTerm) {\n        try {\n            // 如果搜索词为空，获取所有条目\n            if (!searchTerm.trim()) {\n                const entries = await this.apiService.getEntries();\n                return entries;\n            }\n\n            // 使用向量搜索\n            const results = await this.apiService.vectorSearch(searchTerm);\n            if (results && results.length > 0) {\n                // 从结果的payload中提取翻译数据\n                const entries = results.map(result => result.payload);\n                return entries;\n            } else {\n                return [];\n            }\n        } catch (error) {\n            console.error('搜索条目时出错:', error);\n            this.log('搜索条目失败', 'error');\n            return [];\n        }\n    }\n\n    /**\n     * 删除条目\n     * @param {string} chinese - 中文文本（作为主键）\n     * @returns {Promise<void>}\n     */\n    async deleteEntry(chinese) {\n        const confirmDelete = confirm('确定要删除这条记录吗？');\n        if (!confirmDelete) return;\n        \n        try {\n            const success = await this.apiService.deleteEntry(chinese);\n            \n            if (success) {\n                this.log('删除成功');\n                await this.loadEntries();\n            } else {\n                this.log('删除失败', 'error');\n            }\n        } catch (error) {\n            this.log(`删除失败: ${error.message}`, 'error');\n        }\n    }\n\n    /**\n     * 处理Excel文件\n     * @param {File} file - Excel文件\n     */\n    processExcelFile(file) {\n        const reader = new FileReader();\n        \n        reader.onload = (e) => {\n            try {\n                const data = new Uint8Array(e.target?.result);\n                const workbook = XLSX.read(data, { type: 'array' });\n                \n                // 获取第一个工作表\n                const firstSheetName = workbook.SheetNames[0];\n                const worksheet = workbook.Sheets[firstSheetName];\n                \n                // 将工作表转换为JSON\n                const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n                \n                // 处理数据\n                this.processExcelData(jsonData);\n            } catch (error) {\n                this.log(`Excel文件处理失败: ${error.message}`, 'error');\n            }\n        };\n        \n        reader.onerror = () => {\n            this.log('文件读取失败', 'error');\n        };\n        \n        reader.readAsArrayBuffer(file);\n    }\n\n    /**\n     * 处理Excel数据\n     * @param {Array<Array>} data - Excel数据\n     */\n    processExcelData(data) {\n        try {\n            // 检查数据是否有效\n            if (!data || data.length < 7) {\n                this.log('Excel文件格式不正确，至少需要7行数据', 'error');\n                return;\n            }\n            \n            // 获取表头（第2行，索引为1）\n            const headers = data[1];\n            \n            // 定义表头映射\n            const headerMap = {\n                '简体中文': 'Chinese',\n                '英语': 'English',\n                '日语': 'Japanese',\n                '韩语': 'Korean',\n                '西班牙语': 'Spanish',\n                '法语': 'French',\n                '德语': 'German',\n                '俄语': 'Russian',\n                '泰语': 'Thai',\n                '意大利语': 'Italian',\n                '印尼语': 'Indonesian',\n                '葡萄牙语': 'Portuguese'\n            };\n            \n            // 解析表头索引\n            const headerIndices = {};\n            headers.forEach((header, index) => {\n                const mappedHeader = headerMap[header];\n                if (mappedHeader) {\n                    headerIndices[mappedHeader] = index;\n                }\n            });\n            \n            // 检查必要的表头是否存在\n            if (!headerIndices['Chinese']) {\n                this.log('Excel文件缺少必要的表头：简体中文', 'error');\n                return;\n            }\n            \n            // 处理数据（从第7行开始，索引为6）\n            const entries = [];\n            \n            for (let i = 6; i < data.length; i++) {\n                const row = data[i];\n                \n                // 跳过空行\n                if (!row || row.length === 0) continue;\n                \n                // 创建条目对象\n                const entry = {};\n                \n                // 填充条目数据\n                Object.entries(headerIndices).forEach(([field, index]) => {\n                    if (index < row.length) {\n                        entry[field] = row[index] || '';\n                    }\n                });\n                \n                // 检查必要字段\n                if (entry.Chinese) {\n                    // 检查主键长度，如果超过100个字符则忽略\n                    if (entry.Chinese.length > 100) {\n                        this.log(`警告: 忽略过长的主键 \"${entry.Chinese.substring(0, 30)}...\" (${entry.Chinese.length} 字符)`, 'warning');\n                        continue;\n                    }\n                    entries.push(entry);\n                }\n            }\n            \n            // 更新当前条目\n            this.currentEntries = entries;\n            \n            // 渲染表格\n            this.tableRenderer.renderTable(entries);\n            \n            this.log(`成功解析 ${entries.length} 条记录`);\n        } catch (error) {\n            this.log(`数据处理失败: ${error.message}`, 'error');\n        }\n    }\n\n    /**\n     * 导入文件\n     * @param {File} file - 要导入的文件\n     * @returns {Promise<void>}\n     */\n    async importFile(file) {\n        try {\n            this.log('开始导入文件...');\n            console.log('开始导入文件:', file.name, '大小:', file.size, '类型:', file.type);\n            \n            // 检查文件类型\n            if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {\n                this.log('只支持.xlsx或.xls格式的Excel文件', 'error');\n                console.error('文件格式不支持:', file.name);\n                return;\n            }\n\n            // 显示进度条\n            this.progressFill.style.width = '50%';\n            this.progressText.textContent = '导入中...';\n            this.progressDetails.textContent = `正在导入 ${file.name}`;\n\n            // 开始导入\n            console.log('调用API导入文件');\n            const result = await this.apiService.importExcel(file);\n            console.log('导入结果:', result);\n            \n            if (result.success) {\n                this.log(`成功导入 ${result.count} 条记录`, 'info');\n                console.log(`成功导入 ${result.count} 条记录`);\n                \n                // 更新进度条\n                this.progressFill.style.width = '100%';\n                this.progressText.textContent = '导入完成';\n                this.progressDetails.textContent = `成功导入 ${result.count} 条记录`;\n                \n                // 刷新数据\n                console.log('开始刷新数据表');\n                await this.loadEntries();\n                console.log('数据表刷新完成');\n            } else {\n                const errorMessage = result.error || '导入失败';\n                this.log(errorMessage, 'error');\n                console.error('导入失败:', errorMessage);\n                \n                // 更新进度条\n                this.progressFill.style.width = '0%';\n                this.progressText.textContent = '导入失败';\n                this.progressDetails.textContent = errorMessage;\n                \n                // 显示详细错误信息\n                alert(`导入失败: ${errorMessage}`);\n            }\n        } catch (error) {\n            console.error('导入文件时出错:', error);\n            this.log(`导入文件失败: ${error.message}`, 'error');\n            \n            // 更新进度条\n            this.progressFill.style.width = '0%';\n            this.progressText.textContent = '导入失败';\n            this.progressDetails.textContent = error.message;\n            \n            // 显示详细错误信息\n            alert(`导入文件失败: ${error.message}`);\n        }\n    }\n\n    /**\n     * 初始化\n     */\n    initialize() {\n        // 初始化事件监听器\n        this.initializeEventListeners();\n        \n        // 初始化数据库连接\n        this.initializeDatabase();\n    }\n\n    /**\n     * 记录日志\n     * @param {string} message - 日志消息\n     * @param {'info' | 'warning' | 'error'} [type='info'] - 日志类型\n     */\n    log(message, type = 'info') {\n        // 使用日志函数记录日志\n        this.logFunction(message, type);\n        \n        // 同时在控制台记录\n        if (type === 'info') {\n            console.log(`[知识库] ${message}`);\n        } else if (type === 'warning') {\n            console.warn(`[知识库] ${message}`);\n        } else if (type === 'error') {\n            console.error(`[知识库] ${message}`);\n        }\n    }\n}\n\n// 当DOM加载完成后初始化应用\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.knowledgeBaseManagerInstance = new KnowledgeBaseManager();\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.j = 450;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t450: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkexcel_to_structured_data\"] = self[\"webpackChunkexcel_to_structured_data\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","__webpack_require__.nc = undefined;","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [121], () => (__webpack_require__(9286)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","ApiService","constructor","this","baseUrl","debug","console","log","setDebug","logDebug","message","data","getStatus","response","fetch","ok","Error","status","json","error","getEntries","searchTerm","vectorSearch","text","limit","method","headers","body","JSON","stringify","addEntry","entry","updateEntry","chinese","encodeURIComponent","deleteEntry","cleanId","replace","trim","importExcel","file","name","size","endsWith","success","count","formData","FormData","append","type","statusText","errorText","result","exportExcel","blob","initializeDatabase","escapeHtml","languageFields","key","label","KnowledgeBaseModals","manager","apiService","showEntryDetails","modal","document","createElement","className","content","forEach","field","value","innerHTML","appendChild","closeBtn","querySelector","addEventListener","removeChild","showEditEntryForm","Chinese","cancelBtn","closeModal","async","e","preventDefault","entryChinese","getElementById","updatedEntry","input","loadEntries","showAddEntryForm","newEntry","KnowledgeBaseTableRenderer","container","deleteEntryCallback","modals","currentEntries","renderTable","entries","tableBody","index","tr","English","Japanese","Korean","Spanish","French","German","Russian","Thai","Italian","Indonesian","Portuguese","initializeTableEvents","selectAllCheckbox","querySelectorAll","checkbox","checked","row","getAttribute","find","getSelectedEntryIds","selectedIds","push","KnowledgeBaseManager","logOutput","initializeDOMElements","logFunction","logEntry","textContent","scrollTop","scrollHeight","tableRenderer","kbTableOutput","bind","window","knowledgeBaseManagerInstance","initialize","fileInput","fileName","uploadBtn","actionButtons","progressFill","progressText","progressDetails","searchInput","searchBtn","deleteSelectedBtn","initializeEventListeners","event","files","target","length","style","display","importFile","click","then","confirm","successCount","failCount","id","searchTermLower","toLowerCase","filteredEntries","filter","Object","values","some","includes","searchEntries","results","map","payload","processExcelFile","reader","FileReader","onload","Uint8Array","workbook","firstSheetName","SheetNames","worksheet","Sheets","jsonData","sheet_to_json","header","processExcelData","onerror","readAsArrayBuffer","headerMap","headerIndices","mappedHeader","i","substring","width","errorMessage","alert","warn","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","loaded","__webpack_modules__","call","m","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","nmd","paths","children","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","nc","__webpack_exports__"],"sourceRoot":""}