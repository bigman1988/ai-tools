(()=>{"use strict";var e,t={9286:(e,t,n)=>{n(4788);class s{constructor(){this.baseUrl="http://localhost:3000/api",this.debug=!0,console.log("ApiService: 初始化，baseUrl =",this.baseUrl)}setDebug(e){this.debug=e,console.log("ApiService: 调试模式",e?"开启":"关闭")}logDebug(e,t){this.debug&&(t?console.log(`[API] ${e}`,t):console.log(`[API] ${e}`))}async getStatus(){try{const e=await fetch(`${this.baseUrl}/status`);if(!e.ok)throw new Error(`服务器响应错误: ${e.status}`);return await e.json()}catch(e){throw console.error("获取服务器状态失败:",e),e}}async getEntries(e){try{const t=await fetch(`${this.baseUrl}/entries${e?`?search=${e}`:""}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(e){throw console.error("获取条目失败:",e),e}}async vectorSearch(e,t=10){try{const n=await fetch(`${this.baseUrl}/vector-search`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({text:e,limit:t})});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);return await n.json()}catch(e){throw console.error("向量搜索失败:",e),e}}async addEntry(e){try{return(await fetch(`${this.baseUrl}/entries`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).ok}catch(e){return console.error("添加条目失败:",e),!1}}async updateEntry(e,t){try{return(await fetch(`${this.baseUrl}/entries/${encodeURIComponent(e)}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})).ok}catch(e){return console.error("更新条目失败:",e),!1}}async deleteEntry(e){try{console.log(`API服务 - 删除条目，原始ID: "${e}"`);const t=e.replace(/[\r\n]+/g," ").trim();console.log(`API服务 - 删除条目，处理后ID: "${t}"`);const n=await fetch(`${this.baseUrl}/entries/${encodeURIComponent(t)}`,{method:"DELETE"});return n.ok?(console.log("API服务 - 删除条目成功"),!0):(console.error(`API服务 - 删除条目失败，状态码: ${n.status}`),!1)}catch(e){return console.error("删除条目失败:",e),!1}}async importExcel(e){try{if(console.log("ApiService: 开始导入Excel文件",e.name,e.size),!e.name.endsWith(".xlsx")&&!e.name.endsWith(".xls"))return console.error("ApiService: 文件格式不支持",e.name),{success:!1,count:0,error:"只支持.xlsx或.xls格式的Excel文件"};const t=new FormData;t.append("file",e),console.log("ApiService: FormData已创建并添加文件"),console.log("ApiService: 请求URL:",`${this.baseUrl}/import`),console.log("ApiService: 请求方法:","POST"),console.log("ApiService: 文件类型:",e.type),console.log("ApiService: 开始发送请求到",`${this.baseUrl}/import`);const n=await fetch(`${this.baseUrl}/import`,{method:"POST",body:t});if(console.log("ApiService: 收到响应",n.status,n.statusText),!n.ok){const e=await n.text();return console.error("ApiService: 导入失败",n.status,e),{success:!1,count:0,error:`导入失败: ${n.status} - ${e}`}}const s=await n.json();return console.log("ApiService: 导入成功",s),{success:!0,count:s.count||0}}catch(e){return console.error("ApiService: 导入Excel失败:",e),{success:!1,count:0,error:e.message}}}async exportExcel(){try{const e=await fetch(`${this.baseUrl}/export`);if(!e.ok)throw new Error(`导出Excel失败: ${e.status}`);return await e.blob()}catch(e){throw console.error("导出Excel失败:",e),e}}async initializeDatabase(){try{await this.getStatus(),console.log("API服务器连接成功")}catch(e){throw console.error("API服务器连接失败:",e),new Error("无法连接到API服务器，请确保服务器已启动")}}}function r(e){return e?e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;"):""}new s;const o=[{key:"Chinese",label:"中文"},{key:"English",label:"英文"},{key:"Japanese",label:"日文"},{key:"Korean",label:"韩文"},{key:"Spanish",label:"西班牙文"},{key:"French",label:"法文"},{key:"German",label:"德文"},{key:"Russian",label:"俄文"},{key:"Thai",label:"泰文"},{key:"Italian",label:"意大利文"},{key:"Indonesian",label:"印尼文"},{key:"Portuguese",label:"葡萄牙文"}];class i{constructor(e){this.manager=e,this.apiService=new s}showEntryDetails(e){const t=document.createElement("div");t.className="modal";let n='\n            <div class="modal-content">\n                <span class="close">&times;</span>\n                <h2>查看翻译条目</h2>\n                <div class="entry-details">\n        ';o.forEach((t=>{const s=e[t.key];n+=`\n                <div class="entry-field">\n                    <label>${t.label}:</label>\n                    <div class="field-value">${s||""}</div>\n                </div>\n            `})),n+="\n                </div>\n            </div>\n        ",t.innerHTML=n,document.body.appendChild(t);const s=t.querySelector(".close");s&&s.addEventListener("click",(()=>{document.body.removeChild(t)}))}showEditEntryForm(e){const t=document.createElement("div");t.className="modal";let n=`\n            <div class="modal-content">\n                <span class="close">&times;</span>\n                <h2>编辑翻译条目</h2>\n                <form id="editEntryForm">\n                    <input type="hidden" id="entryChinese" value="${e.Chinese}">\n        `;o.forEach((t=>{const s=e[t.key];n+=`\n                <div class="form-group">\n                    <label for="${t.key}">${t.label}:</label>\n                    <textarea id="${t.key}" class="form-control" rows="2">${s||""}</textarea>\n                </div>\n            `})),n+='\n                    <div class="form-group">\n                        <button type="submit" class="btn">保存</button>\n                        <button type="button" class="btn cancel-btn">取消</button>\n                    </div>\n                </form>\n            </div>\n        ',t.innerHTML=n,document.body.appendChild(t);const s=t.querySelector(".close"),r=t.querySelector(".cancel-btn"),i=()=>{document.body.removeChild(t)};s&&s.addEventListener("click",i),r&&r.addEventListener("click",i),t.querySelector("#editEntryForm").addEventListener("submit",(async e=>{e.preventDefault();const n=document.getElementById("entryChinese").value,s={};o.forEach((e=>{const t=document.getElementById(e.key);t&&t.value&&(s[e.key]=t.value)}));try{await this.apiService.updateEntry(n,s),this.manager.log("条目更新成功","info"),document.body.removeChild(t),await this.manager.loadEntries()}catch(e){this.manager.log(`更新失败: ${e.message}`,"error")}}))}showAddEntryForm(){const e=document.createElement("div");e.className="modal";let t='\n            <div class="modal-content">\n                <span class="close">&times;</span>\n                <h2>添加翻译条目</h2>\n                <form id="addEntryForm">\n        ';o.forEach((e=>{t+=`\n                <div class="form-group">\n                    <label for="${e.key}">${e.label}:</label>\n                    <textarea id="${e.key}" class="form-control" rows="2"></textarea>\n                </div>\n            `})),t+='\n                    <div class="form-group">\n                        <button type="submit" class="btn">保存</button>\n                        <button type="button" class="btn cancel-btn">取消</button>\n                    </div>\n                </form>\n            </div>\n        ',e.innerHTML=t,document.body.appendChild(e);const n=e.querySelector(".close"),s=e.querySelector(".cancel-btn"),r=()=>{document.body.removeChild(e)};n&&n.addEventListener("click",r),s&&s.addEventListener("click",r),e.querySelector("#addEntryForm").addEventListener("submit",(async t=>{t.preventDefault();const n={};if(o.forEach((e=>{const t=document.getElementById(e.key);t&&t.value&&(n[e.key]=t.value)})),n.Chinese)try{await this.apiService.addEntry(n),this.manager.log("条目添加成功","info"),document.body.removeChild(e),await this.manager.loadEntries()}catch(e){this.manager.log(`添加失败: ${e.message}`,"error")}else this.manager.log("中文字段不能为空","error")}))}}class l{constructor(e,t,n){this.container=e,this.manager=t,this.modals=new i(t),this.deleteEntryCallback=n,this.currentEntries=[]}renderTable(e){if(this.currentEntries=e,!this.container)return;this.container.innerHTML='\n            <table class="kb-table">\n                <thead>\n                    <tr>\n                        <th class="checkbox-cell"><input type="checkbox" id="selectAll"></th>\n                        <th>中文</th>\n                        <th>英文</th>\n                        <th>日文</th>\n                        <th>韩文</th>\n                        <th>西班牙文</th>\n                        <th>法文</th>\n                        <th>德文</th>\n                        <th>俄文</th>\n                        <th>泰文</th>\n                        <th>意大利文</th>\n                        <th>印尼文</th>\n                        <th>葡萄牙文</th>\n                    </tr>\n                </thead>\n                <tbody id="entriesTableBody">\n                </tbody>\n            </table>\n        ';const t=document.getElementById("entriesTableBody");t&&(e.forEach(((e,n)=>{const s=document.createElement("tr");s.innerHTML=`\n                <td class="checkbox-cell"><input type="checkbox" class="entry-checkbox" data-id="${e.Chinese}"></td>\n                <td class="content-cell">${r(e.Chinese||"")}</td>\n                <td class="content-cell">${r(e.English||"")}</td>\n                <td class="content-cell">${r(e.Japanese||"")}</td>\n                <td class="content-cell">${r(e.Korean||"")}</td>\n                <td class="content-cell">${r(e.Spanish||"")}</td>\n                <td class="content-cell">${r(e.French||"")}</td>\n                <td class="content-cell">${r(e.German||"")}</td>\n                <td class="content-cell">${r(e.Russian||"")}</td>\n                <td class="content-cell">${r(e.Thai||"")}</td>\n                <td class="content-cell">${r(e.Italian||"")}</td>\n                <td class="content-cell">${r(e.Indonesian||"")}</td>\n                <td class="content-cell">${r(e.Portuguese||"")}</td>\n            `,t.appendChild(s)})),this.initializeTableEvents())}initializeTableEvents(){const e=document.getElementById("selectAll");e&&e.addEventListener("change",(()=>{document.querySelectorAll(".entry-checkbox").forEach((t=>{t.checked=e.checked}))})),document.querySelectorAll("#entriesTableBody tr").forEach((e=>{e.addEventListener("dblclick",(()=>{const t=e.querySelector(".entry-checkbox");if(t){const e=t.getAttribute("data-id")||"",n=this.currentEntries.find((t=>t.Chinese===e));n&&this.modals.showEntryDetails(n)}}))}))}getSelectedEntryIds(){const e=[];return document.querySelectorAll(".entry-checkbox:checked").forEach((t=>{const n=t.getAttribute("data-id")||"";n&&e.push(n)})),e}showAddEntryForm(){this.modals.showAddEntryForm()}}var a=n(4451);class c{constructor(){var e;this.currentEntries=[],this.initializeDOMElements(),this.logFunction=(e=this.logOutput,function(t,n="info"){if(!e)return;const s=document.createElement("div");s.className=`log-entry ${n}`,s.textContent=t,e.appendChild(s),e.scrollTop=e.scrollHeight}),this.tableRenderer=new l(this.kbTableOutput,this,this.deleteEntry.bind(this)),this.apiService=new s,window.knowledgeBaseManagerInstance||(this.initialize(),window.knowledgeBaseManagerInstance=this)}initializeDOMElements(){this.fileInput=document.getElementById("fileInput"),this.fileName=document.getElementById("fileName"),this.uploadBtn=document.getElementById("uploadBtn"),this.actionButtons=document.getElementById("actionButtons"),this.logOutput=document.getElementById("logOutput"),this.progressFill=document.getElementById("progressFill"),this.progressText=document.getElementById("progressText"),this.progressDetails=document.getElementById("progressDetails"),this.searchInput=document.getElementById("searchInput"),this.searchBtn=document.getElementById("searchBtn"),this.kbTableOutput=document.getElementById("kbTableOutput"),this.deleteSelectedBtn=document.getElementById("deleteSelectedBtn"),this.fileInput&&this.uploadBtn&&this.kbTableOutput||console.error("无法找到必要的DOM元素")}async initializeDatabase(){try{await this.loadEntries(),this.log("数据库连接成功")}catch(e){this.log(`数据库连接失败: ${e.message}`,"error")}}initializeEventListeners(){this.fileInput.addEventListener("change",(e=>{const t=e.target.files;if(t&&t.length>0){const e=t[0];this.fileName.textContent=e.name,this.actionButtons.style.display="block",this.importFile(e)}})),this.uploadBtn.addEventListener("click",(()=>{this.fileInput.click()})),this.searchBtn.addEventListener("click",(async()=>{const e=this.searchInput.value.trim();await this.loadEntries(e)})),this.searchInput.addEventListener("keypress",(e=>{if("Enter"===e.key){const e=this.searchInput.value.trim();this.loadEntries(e).then()}})),this.deleteSelectedBtn.addEventListener("click",(async()=>{const e=this.tableRenderer.getSelectedEntryIds();if(0!==e.length){if(confirm(`确定要删除选中的 ${e.length} 条记录吗？`))try{let t=0,n=0;for(const s of e)try{console.log(`原始ID: "${s}"`);const e=s.replace(/[\r\n]+/g," ").trim();console.log(`处理后ID: "${e}"`),await this.apiService.deleteEntry(e)?t++:(n++,this.log(`删除失败: ${e}`,"error"))}catch(e){n++,this.log(`删除失败 "${s}": ${e.message}`,"error")}this.log(`批量删除完成，成功: ${t}，失败: ${n}`),await this.loadEntries()}catch(e){this.log(`批量删除失败: ${e.message}`,"error")}}else this.log("请先选择要删除的条目","error")}))}async loadEntries(e){try{const t=await this.apiService.getEntries();if(this.currentEntries=t,e){const t=e.toLowerCase(),n=this.currentEntries.filter((e=>Object.values(e).some((e=>"string"==typeof e&&e.toLowerCase().includes(t)))));this.tableRenderer.renderTable(n),this.log(`找到 ${n.length} 条匹配记录`)}else this.tableRenderer.renderTable(t),this.log(`加载了 ${t.length} 条记录`)}catch(e){console.error("加载条目时出错:",e),this.log("加载条目失败","error")}}async searchEntries(e){try{if(!e.trim())return await this.apiService.getEntries();const t=await this.apiService.vectorSearch(e);return t&&t.length>0?t.map((e=>e.payload)):[]}catch(e){return console.error("搜索条目时出错:",e),this.log("搜索条目失败","error"),[]}}async deleteEntry(e){if(confirm("确定要删除这条记录吗？"))try{await this.apiService.deleteEntry(e)?(this.log("删除成功"),await this.loadEntries()):this.log("删除失败","error")}catch(e){this.log(`删除失败: ${e.message}`,"error")}}processExcelFile(e){const t=new FileReader;t.onload=e=>{try{const t=new Uint8Array(e.target?.result),n=a.read(t,{type:"array"}),s=n.SheetNames[0],r=n.Sheets[s],o=a.utils.sheet_to_json(r,{header:1});this.processExcelData(o)}catch(e){this.log(`Excel文件处理失败: ${e.message}`,"error")}},t.onerror=()=>{this.log("文件读取失败","error")},t.readAsArrayBuffer(e)}processExcelData(e){try{if(!e||e.length<7)return void this.log("Excel文件格式不正确，至少需要7行数据","error");const t=e[1],n={简体中文:"Chinese",英语:"English",日语:"Japanese",韩语:"Korean",西班牙语:"Spanish",法语:"French",德语:"German",俄语:"Russian",泰语:"Thai",意大利语:"Italian",印尼语:"Indonesian",葡萄牙语:"Portuguese"},s={};if(t.forEach(((e,t)=>{const r=n[e];r&&(s[r]=t)})),!s.Chinese)return void this.log("Excel文件缺少必要的表头：简体中文","error");const r=[];for(let t=6;t<e.length;t++){const n=e[t];if(!n||0===n.length)continue;const o={};if(Object.entries(s).forEach((([e,t])=>{t<n.length&&(o[e]=n[t]||"")})),o.Chinese){if(o.Chinese.length>100){this.log(`警告: 忽略过长的主键 "${o.Chinese.substring(0,30)}..." (${o.Chinese.length} 字符)`,"warning");continue}r.push(o)}}this.currentEntries=r,this.tableRenderer.renderTable(r),this.log(`成功解析 ${r.length} 条记录`)}catch(e){this.log(`数据处理失败: ${e.message}`,"error")}}async importFile(e){try{if(this.log("开始导入文件..."),console.log("开始导入文件:",e.name,"大小:",e.size,"类型:",e.type),!e.name.endsWith(".xlsx")&&!e.name.endsWith(".xls"))return this.log("只支持.xlsx或.xls格式的Excel文件","error"),void console.error("文件格式不支持:",e.name);this.progressFill.style.width="50%",this.progressText.textContent="导入中...",this.progressDetails.textContent=`正在导入 ${e.name}`,console.log("调用API导入文件");const t=await this.apiService.importExcel(e);if(console.log("导入结果:",t),t.success)this.log(`成功导入 ${t.count} 条记录`,"info"),console.log(`成功导入 ${t.count} 条记录`),this.progressFill.style.width="100%",this.progressText.textContent="导入完成",this.progressDetails.textContent=`成功导入 ${t.count} 条记录`,console.log("开始刷新数据表"),await this.loadEntries(),console.log("数据表刷新完成");else{const e=t.error||"导入失败";this.log(e,"error"),console.error("导入失败:",e),this.progressFill.style.width="0%",this.progressText.textContent="导入失败",this.progressDetails.textContent=e,alert(`导入失败: ${e}`)}}catch(e){console.error("导入文件时出错:",e),this.log(`导入文件失败: ${e.message}`,"error"),this.progressFill.style.width="0%",this.progressText.textContent="导入失败",this.progressDetails.textContent=e.message,alert(`导入文件失败: ${e.message}`)}}initialize(){this.initializeEventListeners(),this.initializeDatabase()}log(e,t="info"){this.logFunction(e,t),"info"===t?console.log(`[知识库] ${e}`):"warning"===t?console.warn(`[知识库] ${e}`):"error"===t&&console.error(`[知识库] ${e}`)}}document.addEventListener("DOMContentLoaded",(()=>{window.knowledgeBaseManagerInstance=new c}))}},n={};function s(e){var r=n[e];if(void 0!==r)return r.exports;var o=n[e]={id:e,loaded:!1,exports:{}};return t[e].call(o.exports,o,o.exports,s),o.loaded=!0,o.exports}s.m=t,e=[],s.O=(t,n,r,o)=>{if(!n){var i=1/0;for(h=0;h<e.length;h++){for(var[n,r,o]=e[h],l=!0,a=0;a<n.length;a++)(!1&o||i>=o)&&Object.keys(s.O).every((e=>s.O[e](n[a])))?n.splice(a--,1):(l=!1,o<i&&(i=o));if(l){e.splice(h--,1);var c=r();void 0!==c&&(t=c)}}return t}o=o||0;for(var h=e.length;h>0&&e[h-1][2]>o;h--)e[h]=e[h-1];e[h]=[n,r,o]},s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),s.j=450,(()=>{var e={450:0};s.O.j=t=>0===e[t];var t=(t,n)=>{var r,o,[i,l,a]=n,c=0;if(i.some((t=>0!==e[t]))){for(r in l)s.o(l,r)&&(s.m[r]=l[r]);if(a)var h=a(s)}for(t&&t(n);c<i.length;c++)o=i[c],s.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return s.O(h)},n=self.webpackChunkexcel_to_structured_data=self.webpackChunkexcel_to_structured_data||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),s.nc=void 0;var r=s.O(void 0,[121],(()=>s(9286)));r=s.O(r)})();
//# sourceMappingURL=knowledgeBase.bundle.js.map